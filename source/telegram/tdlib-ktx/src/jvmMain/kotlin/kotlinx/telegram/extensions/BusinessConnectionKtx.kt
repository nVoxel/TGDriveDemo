//
// NOTE: THIS FILE IS AUTO-GENERATED by the "ExtensionsGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.extensions

import kotlinx.telegram.core.TelegramFlow
import kotlinx.telegram.coroutines.sendBusinessMessage
import kotlinx.telegram.coroutines.sendBusinessMessageAlbum
import kotlinx.telegram.coroutines.sendChatAction
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.BusinessConnection
import org.drinkless.tdlib.TdApi.ChatAction
import org.drinkless.tdlib.TdApi.InputMessageContent
import org.drinkless.tdlib.TdApi.InputMessageReplyTo
import org.drinkless.tdlib.TdApi.ReplyMarkup

/**
 * Interface for access [TdApi.BusinessConnection] extension functions. Can be used alongside with
 * other extension interfaces of the package. Must contain [TelegramFlow] instance field to access its
 * functionality
 */
interface BusinessConnectionKtx : BaseKtx {
    /**
     * Instance of the [TelegramFlow] connecting extensions to the Telegram Client
     */
    override val api: TelegramFlow

    /**
     * Suspend function, which sends a message on behalf of a business account; for bots only. Returns
     * the message after it was sent.
     *
     * @param chatId Target chat.
     * @param replyTo Information about the message to be replied; pass null if none.
     * @param disableNotification Pass true to disable notification for the message.
     * @param protectContent Pass true if the content of the message must be protected from forwarding
     * and saving.
     * @param replyMarkup Markup for replying to the message; pass null if none.
     * @param inputMessageContent The content of the message to be sent.
     *
     * @return [TdApi.BusinessMessage] Describes a message from a business account as received by a
     * bot.
     */
    suspend fun BusinessConnection.sendBusinessMessage(
        chatId: Long,
        replyTo: InputMessageReplyTo?,
        disableNotification: Boolean,
        protectContent: Boolean,
        replyMarkup: ReplyMarkup?,
        inputMessageContent: InputMessageContent?,
    ) = api.sendBusinessMessage(
        this.id, chatId, replyTo, disableNotification, protectContent,
        replyMarkup, inputMessageContent
    )

    /**
     * Suspend function, which sends 2-10 messages grouped together into an album on behalf of a
     * business account; for bots only. Currently, only audio, document, photo and video messages can be
     * grouped into an album. Documents and audio files can be only grouped in an album with messages of
     * the same type. Returns sent messages.
     *
     * @param chatId Target chat.
     * @param replyTo Information about the message to be replied; pass null if none.
     * @param disableNotification Pass true to disable notification for the message.
     * @param protectContent Pass true if the content of the message must be protected from forwarding
     * and saving.
     * @param inputMessageContents Contents of messages to be sent. At most 10 messages can be added
     * to an album.
     *
     * @return [TdApi.BusinessMessages] Contains a list of messages from a business account as
     * received by a bot.
     */
    suspend fun BusinessConnection.sendBusinessMessageAlbum(
        chatId: Long,
        replyTo: InputMessageReplyTo?,
        disableNotification: Boolean,
        protectContent: Boolean,
        inputMessageContents: Array<InputMessageContent>?,
    ) = api.sendBusinessMessageAlbum(
        this.id, chatId, replyTo, disableNotification, protectContent,
        inputMessageContents
    )

    /**
     * Suspend function, which sends a notification about user activity in a chat.
     *
     * @param chatId Chat identifier.
     * @param messageThreadId If not 0, the message thread identifier in which the action was
     * performed.
     * @param action The action description; pass null to cancel the currently active action.
     */
    suspend fun BusinessConnection.sendChatAction(
        chatId: Long,
        messageThreadId: Long,
        action: ChatAction?,
    ) = api.sendChatAction(chatId, messageThreadId, this.id, action)
}
