//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.coroutines

import kotlinx.telegram.core.TelegramFlow
import org.drinkless.td.libcore.telegram.TdApi
import org.drinkless.td.libcore.telegram.TdApi.Chat
import org.drinkless.td.libcore.telegram.TdApi.ChatAction
import org.drinkless.td.libcore.telegram.TdApi.ChatAdministrators
import org.drinkless.td.libcore.telegram.TdApi.ChatFilter
import org.drinkless.td.libcore.telegram.TdApi.ChatFilterInfo
import org.drinkless.td.libcore.telegram.TdApi.ChatInviteLink
import org.drinkless.td.libcore.telegram.TdApi.ChatInviteLinkCounts
import org.drinkless.td.libcore.telegram.TdApi.ChatInviteLinkInfo
import org.drinkless.td.libcore.telegram.TdApi.ChatInviteLinkMember
import org.drinkless.td.libcore.telegram.TdApi.ChatInviteLinkMembers
import org.drinkless.td.libcore.telegram.TdApi.ChatInviteLinks
import org.drinkless.td.libcore.telegram.TdApi.ChatJoinRequest
import org.drinkless.td.libcore.telegram.TdApi.ChatJoinRequests
import org.drinkless.td.libcore.telegram.TdApi.ChatList
import org.drinkless.td.libcore.telegram.TdApi.ChatLists
import org.drinkless.td.libcore.telegram.TdApi.ChatLocation
import org.drinkless.td.libcore.telegram.TdApi.ChatMember
import org.drinkless.td.libcore.telegram.TdApi.ChatMemberStatus
import org.drinkless.td.libcore.telegram.TdApi.ChatMembers
import org.drinkless.td.libcore.telegram.TdApi.ChatMembersFilter
import org.drinkless.td.libcore.telegram.TdApi.ChatNotificationSettings
import org.drinkless.td.libcore.telegram.TdApi.ChatPermissions
import org.drinkless.td.libcore.telegram.TdApi.ChatReportReason
import org.drinkless.td.libcore.telegram.TdApi.ChatStatistics
import org.drinkless.td.libcore.telegram.TdApi.Chats
import org.drinkless.td.libcore.telegram.TdApi.ChatsNearby
import org.drinkless.td.libcore.telegram.TdApi.CheckChatUsernameResult
import org.drinkless.td.libcore.telegram.TdApi.Count
import org.drinkless.td.libcore.telegram.TdApi.DraftMessage
import org.drinkless.td.libcore.telegram.TdApi.GroupCallId
import org.drinkless.td.libcore.telegram.TdApi.InputChatPhoto
import org.drinkless.td.libcore.telegram.TdApi.Location
import org.drinkless.td.libcore.telegram.TdApi.Message
import org.drinkless.td.libcore.telegram.TdApi.MessageCalendar
import org.drinkless.td.libcore.telegram.TdApi.MessagePositions
import org.drinkless.td.libcore.telegram.TdApi.MessageSender
import org.drinkless.td.libcore.telegram.TdApi.MessageSenders
import org.drinkless.td.libcore.telegram.TdApi.Messages
import org.drinkless.td.libcore.telegram.TdApi.NotificationSettingsScope
import org.drinkless.td.libcore.telegram.TdApi.PublicChatType
import org.drinkless.td.libcore.telegram.TdApi.RecommendedChatFilters
import org.drinkless.td.libcore.telegram.TdApi.SearchMessagesFilter
import org.drinkless.td.libcore.telegram.TdApi.SecretChat
import org.drinkless.td.libcore.telegram.TdApi.SponsoredMessage
import org.drinkless.td.libcore.telegram.TdApi.Text
import org.drinkless.td.libcore.telegram.TdApi.TopChatCategory

/**
 * Suspend function, which adds a new member to a chat. Members can't be added to private or secret
 * chats.
 *
 * @param chatId Chat identifier.
 * @param userId Identifier of the user.
 * @param forwardLimit The number of earlier messages from the chat to be forwarded to the new
 * member; up to 100. Ignored for supergroups and channels, or if the added user is a bot.
 */
suspend fun TelegramFlow.addChatMember(
    chatId: Long,
    userId: Long,
    forwardLimit: Int,
) = this.sendFunctionLaunch(TdApi.AddChatMember(chatId, userId, forwardLimit))

/**
 * Suspend function, which adds multiple new members to a chat. Currently, this method is only
 * available for supergroups and channels. This method can't be used to join a chat. Members can't be
 * added to a channel if it has more than 200 members.
 *
 * @param chatId Chat identifier.
 * @param userIds Identifiers of the users to be added to the chat. The maximum number of added
 * users is 20 for supergroups and 100 for channels.
 */
suspend fun TelegramFlow.addChatMembers(chatId: Long, userIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.AddChatMembers(chatId, userIds))

/**
 * Suspend function, which adds a chat to a chat list. A chat can't be simultaneously in Main and
 * Archive chat lists, so it is automatically removed from another one if needed.
 *
 * @param chatId Chat identifier.
 * @param chatList The chat list. Use getChatListsToAddChat to get suitable chat lists.
 */
suspend fun TelegramFlow.addChatToList(chatId: Long, chatList: ChatList?) =
    this.sendFunctionLaunch(TdApi.AddChatToList(chatId, chatList))

/**
 * Suspend function, which adds a chat to the list of recently found chats. The chat is added to the
 * beginning of the list. If the chat is already in the list, it will be removed from the list first.
 *
 * @param chatId Identifier of the chat to add.
 */
suspend fun TelegramFlow.addRecentlyFoundChat(chatId: Long) =
    this.sendFunctionLaunch(TdApi.AddRecentlyFoundChat(chatId))

/**
 * Suspend function, which bans a member in a chat. Members can't be banned in private or secret
 * chats. In supergroups and channels, the user will not be able to return to the group on their own
 * using invite links, etc., unless unbanned first.
 *
 * @param chatId Chat identifier.
 * @param memberId Member identifier.
 * @param bannedUntilDate Point in time (Unix timestamp) when the user will be unbanned; 0 if never.
 * If the user is banned for more than 366 days or for less than 30 seconds from the current time, the
 * user is considered to be banned forever. Ignored in basic groups and if a chat is banned.
 * @param revokeMessages Pass true to delete all messages in the chat for the user that is being
 * removed. Always true for supergroups and channels.
 */
suspend fun TelegramFlow.banChatMember(
    chatId: Long,
    memberId: MessageSender?,
    bannedUntilDate: Int,
    revokeMessages: Boolean,
) = this.sendFunctionLaunch(TdApi.BanChatMember(chatId, memberId, bannedUntilDate, revokeMessages))

/**
 * Suspend function, which checks the validity of an invite link for a chat and returns information
 * about the corresponding chat.
 *
 * @param inviteLink Invite link to be checked.
 *
 * @return [ChatInviteLinkInfo] Contains information about a chat invite link.
 */
suspend fun TelegramFlow.checkChatInviteLink(inviteLink: String?): ChatInviteLinkInfo =
    this.sendFunctionAsync(TdApi.CheckChatInviteLink(inviteLink))

/**
 * Suspend function, which checks whether a username can be set for a chat.
 *
 * @param chatId Chat identifier; must be identifier of a supergroup chat, or a channel chat, or a
 * private chat with self, or zero if the chat is being created.
 * @param username Username to be checked.
 *
 * @return [CheckChatUsernameResult] This class is an abstract base class.
 */
suspend fun TelegramFlow.checkChatUsername(chatId: Long, username: String?): CheckChatUsernameResult =
    this.sendFunctionAsync(TdApi.CheckChatUsername(chatId, username))

/**
 * Suspend function, which checks whether the maximum number of owned public chats has been reached.
 * Returns corresponding error if the limit was reached.
 *
 * @param type Type of the public chats, for which to check the limit.
 */
suspend fun TelegramFlow.checkCreatedPublicChatsLimit(type: PublicChatType?) =
    this.sendFunctionLaunch(TdApi.CheckCreatedPublicChatsLimit(type))

/**
 * Suspend function, which clears the list of recently found chats.
 */
suspend fun TelegramFlow.clearRecentlyFoundChats() =
    this.sendFunctionLaunch(TdApi.ClearRecentlyFoundChats())

/**
 * Suspend function, which informs TDLib that the chat is closed by the user. Many useful activities
 * depend on the chat being opened or closed.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.closeChat(chatId: Long) = this.sendFunctionLaunch(TdApi.CloseChat(chatId))

/**
 * Suspend function, which closes a secret chat, effectively transferring its state to
 * secretChatStateClosed.
 *
 * @param secretChatId Secret chat identifier.
 */
suspend fun TelegramFlow.closeSecretChat(secretChatId: Int) =
    this.sendFunctionLaunch(TdApi.CloseSecretChat(secretChatId))

/**
 * Suspend function, which returns an existing chat corresponding to a known basic group.
 *
 * @param basicGroupId Basic group identifier.
 * @param force If true, the chat will be created without network request. In this case all
 * information about the chat except its type, title and photo can be incorrect.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createBasicGroupChat(basicGroupId: Long, force: Boolean): Chat =
    this.sendFunctionAsync(TdApi.CreateBasicGroupChat(basicGroupId, force))

/**
 * Suspend function, which creates new chat filter. Returns information about the created chat
 * filter.
 *
 * @param filter Chat filter.
 *
 * @return [ChatFilterInfo] Contains basic information about a chat filter.
 */
suspend fun TelegramFlow.createChatFilter(filter: ChatFilter?): ChatFilterInfo =
    this.sendFunctionAsync(TdApi.CreateChatFilter(filter))

/**
 * Suspend function, which creates a new invite link for a chat. Available for basic groups,
 * supergroups, and channels. Requires administrator privileges and canInviteUsers right in the chat.
 *
 * @param chatId Chat identifier.
 * @param name Invite link name; 0-32 characters.
 * @param expirationDate Point in time (Unix timestamp) when the link will expire; pass 0 if never.
 *
 * @param memberLimit The maximum number of chat members that can join the chat via the link
 * simultaneously; 0-99999; pass 0 if not limited.
 * @param createsJoinRequest True, if the link only creates join request. If true, memberLimit must
 * not be specified.
 *
 * @return [ChatInviteLink] Contains a chat invite link.
 */
suspend fun TelegramFlow.createChatInviteLink(
    chatId: Long,
    name: String?,
    expirationDate: Int,
    memberLimit: Int,
    createsJoinRequest: Boolean,
): ChatInviteLink = this.sendFunctionAsync(
    TdApi.CreateChatInviteLink(
        chatId, name, expirationDate,
        memberLimit, createsJoinRequest
    )
)

/**
 * Suspend function, which creates a new basic group and sends a corresponding
 * messageBasicGroupChatCreate. Returns the newly created chat.
 *
 * @param userIds Identifiers of users to be added to the basic group.
 * @param title Title of the new basic group; 1-128 characters.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createNewBasicGroupChat(userIds: LongArray?, title: String?): Chat =
    this.sendFunctionAsync(TdApi.CreateNewBasicGroupChat(userIds, title))

/**
 * Suspend function, which creates a new secret chat. Returns the newly created chat.
 *
 * @param userId Identifier of the target user.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createNewSecretChat(userId: Long): Chat =
    this.sendFunctionAsync(TdApi.CreateNewSecretChat(userId))

/**
 * Suspend function, which creates a new supergroup or channel and sends a corresponding
 * messageSupergroupChatCreate. Returns the newly created chat.
 *
 * @param title Title of the new chat; 1-128 characters.
 * @param isChannel True, if a channel chat needs to be created.
 * @param description Chat description; 0-255 characters.
 * @param location Chat location if a location-based supergroup is being created; pass null to
 * create an ordinary supergroup chat.
 * @param forImport True, if the supergroup is created for importing messages using importMessage.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createNewSupergroupChat(
    title: String?,
    isChannel: Boolean,
    description: String?,
    location: ChatLocation?,
    forImport: Boolean,
): Chat = this.sendFunctionAsync(
    TdApi.CreateNewSupergroupChat(
        title, isChannel, description,
        location, forImport
    )
)

/**
 * Suspend function, which returns an existing chat corresponding to a given user.
 *
 * @param userId User identifier.
 * @param force If true, the chat will be created without network request. In this case all
 * information about the chat except its type, title and photo can be incorrect.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createPrivateChat(userId: Long, force: Boolean): Chat =
    this.sendFunctionAsync(TdApi.CreatePrivateChat(userId, force))

/**
 * Suspend function, which returns an existing chat corresponding to a known secret chat.
 *
 * @param secretChatId Secret chat identifier.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createSecretChat(secretChatId: Int): Chat =
    this.sendFunctionAsync(TdApi.CreateSecretChat(secretChatId))

/**
 * Suspend function, which returns an existing chat corresponding to a known supergroup or channel.
 *
 * @param supergroupId Supergroup or channel identifier.
 * @param force If true, the chat will be created without network request. In this case all
 * information about the chat except its type, title and photo can be incorrect.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.createSupergroupChat(supergroupId: Long, force: Boolean): Chat =
    this.sendFunctionAsync(TdApi.CreateSupergroupChat(supergroupId, force))

/**
 * Suspend function, which creates a video chat (a group call bound to a chat). Available only for
 * basic groups, supergroups and channels; requires canManageVideoChats rights.
 *
 * @param chatId Chat identifier, in which the video chat will be created.
 * @param title Group call title; if empty, chat title will be used.
 * @param startDate Point in time (Unix timestamp) when the group call is supposed to be started by
 * an administrator; 0 to start the video chat immediately. The date must be at least 10 seconds and at
 * most 8 days in the future.
 *
 * @return [GroupCallId] Contains the group call identifier.
 */
suspend fun TelegramFlow.createVideoChat(
    chatId: Long,
    title: String?,
    startDate: Int,
): GroupCallId = this.sendFunctionAsync(TdApi.CreateVideoChat(chatId, title, startDate))

/**
 * Suspend function, which deletes all revoked chat invite links created by a given chat
 * administrator. Requires administrator privileges and canInviteUsers right in the chat for own links
 * and owner privileges for other links.
 *
 * @param chatId Chat identifier.
 * @param creatorUserId User identifier of a chat administrator, which links will be deleted. Must
 * be an identifier of the current user for non-owner.
 */
suspend fun TelegramFlow.deleteAllRevokedChatInviteLinks(chatId: Long, creatorUserId: Long) =
    this.sendFunctionLaunch(TdApi.DeleteAllRevokedChatInviteLinks(chatId, creatorUserId))

/**
 * Suspend function, which deletes a chat along with all messages in the corresponding chat for all
 * chat members; requires owner privileges. For group chats this will release the username and remove
 * all members. Chats with more than 1000 members can't be deleted using this method.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.deleteChat(chatId: Long) =
    this.sendFunctionLaunch(TdApi.DeleteChat(chatId))

/**
 * Suspend function, which deletes existing chat filter.
 *
 * @param chatFilterId Chat filter identifier.
 */
suspend fun TelegramFlow.deleteChatFilter(chatFilterId: Int) =
    this.sendFunctionLaunch(TdApi.DeleteChatFilter(chatFilterId))

/**
 * Suspend function, which deletes all messages in the chat. Use chat.canBeDeletedOnlyForSelf and
 * chat.canBeDeletedForAllUsers fields to find whether and how the method can be applied to the chat.
 *
 * @param chatId Chat identifier.
 * @param removeFromChatList Pass true if the chat needs to be removed from the chat list.
 * @param revoke Pass true to delete chat history for all users.
 */
suspend fun TelegramFlow.deleteChatHistory(
    chatId: Long,
    removeFromChatList: Boolean,
    revoke: Boolean,
) = this.sendFunctionLaunch(TdApi.DeleteChatHistory(chatId, removeFromChatList, revoke))

/**
 * Suspend function, which deletes all messages between the specified dates in a chat. Supported
 * only for private chats and basic groups. Messages sent in the last 30 seconds will not be deleted.
 *
 * @param chatId Chat identifier.
 * @param minDate The minimum date of the messages to delete.
 * @param maxDate The maximum date of the messages to delete.
 * @param revoke Pass true to delete chat messages for all users; private chats only.
 */
suspend fun TelegramFlow.deleteChatMessagesByDate(
    chatId: Long,
    minDate: Int,
    maxDate: Int,
    revoke: Boolean,
) = this.sendFunctionLaunch(TdApi.DeleteChatMessagesByDate(chatId, minDate, maxDate, revoke))

/**
 * Suspend function, which deletes all messages sent by the specified message sender in a chat.
 * Supported only for supergroups; requires canDeleteMessages administrator privileges.
 *
 * @param chatId Chat identifier.
 * @param senderId Identifier of the sender of messages to delete.
 */
suspend fun TelegramFlow.deleteChatMessagesBySender(chatId: Long, senderId: MessageSender?) =
    this.sendFunctionLaunch(TdApi.DeleteChatMessagesBySender(chatId, senderId))

/**
 * Suspend function, which deletes the default reply markup from a chat. Must be called after a
 * one-time keyboard or a ForceReply reply markup has been used. UpdateChatReplyMarkup will be sent if
 * the reply markup is changed.
 *
 * @param chatId Chat identifier.
 * @param messageId The message identifier of the used keyboard.
 */
suspend fun TelegramFlow.deleteChatReplyMarkup(chatId: Long, messageId: Long) =
    this.sendFunctionLaunch(TdApi.DeleteChatReplyMarkup(chatId, messageId))

/**
 * Suspend function, which deletes revoked chat invite links. Requires administrator privileges and
 * canInviteUsers right in the chat for own links and owner privileges for other links.
 *
 * @param chatId Chat identifier.
 * @param inviteLink Invite link to revoke.
 */
suspend fun TelegramFlow.deleteRevokedChatInviteLink(chatId: Long, inviteLink: String?) =
    this.sendFunctionLaunch(TdApi.DeleteRevokedChatInviteLink(chatId, inviteLink))

/**
 * Suspend function, which edits existing chat filter. Returns information about the edited chat
 * filter.
 *
 * @param chatFilterId Chat filter identifier.
 * @param filter The edited chat filter.
 *
 * @return [ChatFilterInfo] Contains basic information about a chat filter.
 */
suspend fun TelegramFlow.editChatFilter(chatFilterId: Int, filter: ChatFilter?): ChatFilterInfo =
    this.sendFunctionAsync(TdApi.EditChatFilter(chatFilterId, filter))

/**
 * Suspend function, which edits a non-primary invite link for a chat. Available for basic groups,
 * supergroups, and channels. Requires administrator privileges and canInviteUsers right in the chat
 * for own links and owner privileges for other links.
 *
 * @param chatId Chat identifier.
 * @param inviteLink Invite link to be edited.
 * @param name Invite link name; 0-32 characters.
 * @param expirationDate Point in time (Unix timestamp) when the link will expire; pass 0 if never.
 *
 * @param memberLimit The maximum number of chat members that can join the chat via the link
 * simultaneously; 0-99999; pass 0 if not limited.
 * @param createsJoinRequest True, if the link only creates join request. If true, memberLimit must
 * not be specified.
 *
 * @return [ChatInviteLink] Contains a chat invite link.
 */
suspend fun TelegramFlow.editChatInviteLink(
    chatId: Long,
    inviteLink: String?,
    name: String?,
    expirationDate: Int,
    memberLimit: Int,
    createsJoinRequest: Boolean,
): ChatInviteLink = this.sendFunctionAsync(
    TdApi.EditChatInviteLink(
        chatId, inviteLink, name,
        expirationDate, memberLimit, createsJoinRequest
    )
)

/**
 * Suspend function, which returns information about a chat by its identifier, this is an offline
 * request if the current user is not a bot.
 *
 * @param chatId Chat identifier.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.getChat(chatId: Long): Chat = this.sendFunctionAsync(TdApi.GetChat(chatId))

/**
 * Suspend function, which returns a list of administrators of the chat with their custom titles.
 *
 * @param chatId Chat identifier.
 *
 * @return [ChatAdministrators] Represents a list of chat administrators.
 */
suspend fun TelegramFlow.getChatAdministrators(chatId: Long): ChatAdministrators =
    this.sendFunctionAsync(TdApi.GetChatAdministrators(chatId))

/**
 * Suspend function, which returns list of message sender identifiers, which can be used to send
 * messages in a chat.
 *
 * @param chatId Chat identifier.
 *
 * @return [MessageSenders] Represents a list of message senders.
 */
suspend fun TelegramFlow.getChatAvailableMessageSenders(chatId: Long): MessageSenders =
    this.sendFunctionAsync(TdApi.GetChatAvailableMessageSenders(chatId))

/**
 * Suspend function, which returns information about a chat filter by its identifier.
 *
 * @param chatFilterId Chat filter identifier.
 *
 * @return [ChatFilter] Represents a filter of user chats.
 */
suspend fun TelegramFlow.getChatFilter(chatFilterId: Int): ChatFilter =
    this.sendFunctionAsync(TdApi.GetChatFilter(chatFilterId))

/**
 * Suspend function, which returns default icon name for a filter. Can be called synchronously.
 *
 * @param filter Chat filter.
 *
 * @return [Text] Contains some text.
 */
suspend fun TelegramFlow.getChatFilterDefaultIconName(filter: ChatFilter?): Text =
    this.sendFunctionAsync(TdApi.GetChatFilterDefaultIconName(filter))

/**
 * Suspend function, which returns messages in a chat. The messages are returned in a reverse
 * chronological order (i.e., in order of decreasing messageId). For optimal performance, the number of
 * returned messages is chosen by TDLib. This is an offline request if onlyLocal is true.
 *
 * @param chatId Chat identifier.
 * @param fromMessageId Identifier of the message starting from which history must be fetched; use 0
 * to get results from the last message.
 * @param offset Specify 0 to get results from exactly the fromMessageId or a negative offset up to
 * 99 to get additionally some newer messages.
 * @param limit The maximum number of messages to be returned; must be positive and can't be greater
 * than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal
 * performance, the number of returned messages is chosen by TDLib and can be smaller than the
 * specified limit.
 * @param onlyLocal If true, returns only messages that are available locally without sending
 * network requests.
 *
 * @return [Messages] Contains a list of messages.
 */
suspend fun TelegramFlow.getChatHistory(
    chatId: Long,
    fromMessageId: Long,
    offset: Int,
    limit: Int,
    onlyLocal: Boolean,
): Messages = this.sendFunctionAsync(
    TdApi.GetChatHistory(
        chatId, fromMessageId, offset, limit,
        onlyLocal
    )
)

/**
 * Suspend function, which returns information about an invite link. Requires administrator
 * privileges and canInviteUsers right in the chat to get own links and owner privileges to get other
 * links.
 *
 * @param chatId Chat identifier.
 * @param inviteLink Invite link to get.
 *
 * @return [ChatInviteLink] Contains a chat invite link.
 */
suspend fun TelegramFlow.getChatInviteLink(chatId: Long, inviteLink: String?): ChatInviteLink =
    this.sendFunctionAsync(TdApi.GetChatInviteLink(chatId, inviteLink))

/**
 * Suspend function, which returns list of chat administrators with number of their invite links.
 * Requires owner privileges in the chat.
 *
 * @param chatId Chat identifier.
 *
 * @return [ChatInviteLinkCounts] Contains a list of chat invite link counts.
 */
suspend fun TelegramFlow.getChatInviteLinkCounts(chatId: Long): ChatInviteLinkCounts =
    this.sendFunctionAsync(TdApi.GetChatInviteLinkCounts(chatId))

/**
 * Suspend function, which returns chat members joined a chat via an invite link. Requires
 * administrator privileges and canInviteUsers right in the chat for own links and owner privileges for
 * other links.
 *
 * @param chatId Chat identifier.
 * @param inviteLink Invite link for which to return chat members.
 * @param offsetMember A chat member from which to return next chat members; pass null to get
 * results from the beginning.
 * @param limit The maximum number of chat members to return; up to 100.
 *
 * @return [ChatInviteLinkMembers] Contains a list of chat members joined a chat via an invite link.
 */
suspend fun TelegramFlow.getChatInviteLinkMembers(
    chatId: Long,
    inviteLink: String?,
    offsetMember: ChatInviteLinkMember?,
    limit: Int,
): ChatInviteLinkMembers = this.sendFunctionAsync(
    TdApi.GetChatInviteLinkMembers(
        chatId, inviteLink,
        offsetMember, limit
    )
)

/**
 * Suspend function, which returns invite links for a chat created by specified administrator.
 * Requires administrator privileges and canInviteUsers right in the chat to get own links and owner
 * privileges to get other links.
 *
 * @param chatId Chat identifier.
 * @param creatorUserId User identifier of a chat administrator. Must be an identifier of the
 * current user for non-owner.
 * @param isRevoked Pass true if revoked links needs to be returned instead of active or expired.
 * @param offsetDate Creation date of an invite link starting after which to return invite links;
 * use 0 to get results from the beginning.
 * @param offsetInviteLink Invite link starting after which to return invite links; use empty string
 * to get results from the beginning.
 * @param limit The maximum number of invite links to return; up to 100.
 *
 * @return [ChatInviteLinks] Contains a list of chat invite links.
 */
suspend fun TelegramFlow.getChatInviteLinks(
    chatId: Long,
    creatorUserId: Long,
    isRevoked: Boolean,
    offsetDate: Int,
    offsetInviteLink: String?,
    limit: Int,
): ChatInviteLinks = this.sendFunctionAsync(
    TdApi.GetChatInviteLinks(
        chatId, creatorUserId,
        isRevoked, offsetDate, offsetInviteLink, limit
    )
)

/**
 * Suspend function, which returns pending join requests in a chat.
 *
 * @param chatId Chat identifier.
 * @param inviteLink Invite link for which to return join requests. If empty, all join requests will
 * be returned. Requires administrator privileges and canInviteUsers right in the chat for own links
 * and owner privileges for other links.
 * @param query A query to search for in the first names, last names and usernames of the users to
 * return.
 * @param offsetRequest A chat join request from which to return next requests; pass null to get
 * results from the beginning.
 * @param limit The maximum number of requests to join the chat to return.
 *
 * @return [ChatJoinRequests] Contains a list of requests to join a chat.
 */
suspend fun TelegramFlow.getChatJoinRequests(
    chatId: Long,
    inviteLink: String?,
    query: String?,
    offsetRequest: ChatJoinRequest?,
    limit: Int,
): ChatJoinRequests = this.sendFunctionAsync(
    TdApi.GetChatJoinRequests(
        chatId, inviteLink, query,
        offsetRequest, limit
    )
)

/**
 * Suspend function, which returns chat lists to which the chat can be added. This is an offline
 * request.
 *
 * @param chatId Chat identifier.
 *
 * @return [ChatLists] Contains a list of chat lists.
 */
suspend fun TelegramFlow.getChatListsToAddChat(chatId: Long): ChatLists =
    this.sendFunctionAsync(TdApi.GetChatListsToAddChat(chatId))

/**
 * Suspend function, which returns information about a single member of a chat.
 *
 * @param chatId Chat identifier.
 * @param memberId Member identifier.
 *
 * @return [ChatMember] Describes a user or a chat as a member of another chat.
 */
suspend fun TelegramFlow.getChatMember(chatId: Long, memberId: MessageSender?): ChatMember =
    this.sendFunctionAsync(TdApi.GetChatMember(chatId, memberId))

/**
 * Suspend function, which returns the last message sent in a chat no later than the specified date.
 *
 * @param chatId Chat identifier.
 * @param date Point in time (Unix timestamp) relative to which to search for messages.
 *
 * @return [Message] Describes a message.
 */
suspend fun TelegramFlow.getChatMessageByDate(chatId: Long, date: Int): Message =
    this.sendFunctionAsync(TdApi.GetChatMessageByDate(chatId, date))

/**
 * Suspend function, which returns information about the next messages of the specified type in the
 * chat split by days. Returns the results in reverse chronological order. Can return partial result
 * for the last returned day. Behavior of this method depends on the value of the option
 * &quot;utc_time_offset&quot;.
 *
 * @param chatId Identifier of the chat in which to return information about messages.
 * @param filter Filter for message content. Filters searchMessagesFilterEmpty,
 * searchMessagesFilterMention and searchMessagesFilterUnreadMention are unsupported in this function.
 *
 * @param fromMessageId The message identifier from which to return information about messages; use
 * 0 to get results from the last message.
 *
 * @return [MessageCalendar] Contains information about found messages, split by days according to
 * the option &quot;utc_time_offset&quot;.
 */
suspend fun TelegramFlow.getChatMessageCalendar(
    chatId: Long,
    filter: SearchMessagesFilter?,
    fromMessageId: Long,
): MessageCalendar = this.sendFunctionAsync(
    TdApi.GetChatMessageCalendar(
        chatId, filter,
        fromMessageId
    )
)

/**
 * Suspend function, which returns approximate number of messages of the specified type in the chat.
 *
 * @param chatId Identifier of the chat in which to count messages.
 * @param filter Filter for message content; searchMessagesFilterEmpty is unsupported in this
 * function.
 * @param returnLocal If true, returns count that is available locally without sending network
 * requests, returning -1 if the number of messages is unknown.
 *
 * @return [Count] Contains a counter.
 */
suspend fun TelegramFlow.getChatMessageCount(
    chatId: Long,
    filter: SearchMessagesFilter?,
    returnLocal: Boolean,
): Count = this.sendFunctionAsync(TdApi.GetChatMessageCount(chatId, filter, returnLocal))

/**
 * Suspend function, which returns list of chats with non-default notification settings.
 *
 * @param scope If specified, only chats from the scope will be returned; pass null to return chats
 * from all scopes.
 * @param compareSound If true, also chats with non-default sound will be returned.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getChatNotificationSettingsExceptions(
    scope: NotificationSettingsScope?,
    compareSound: Boolean,
): Chats =
    this.sendFunctionAsync(TdApi.GetChatNotificationSettingsExceptions(scope, compareSound))

/**
 * Suspend function, which returns information about a newest pinned message in the chat.
 *
 * @param chatId Identifier of the chat the message belongs to.
 *
 * @return [Message] Describes a message.
 */
suspend fun TelegramFlow.getChatPinnedMessage(chatId: Long): Message =
    this.sendFunctionAsync(TdApi.GetChatPinnedMessage(chatId))

/**
 * Suspend function, which returns all scheduled messages in a chat. The messages are returned in a
 * reverse chronological order (i.e., in order of decreasing messageId).
 *
 * @param chatId Chat identifier.
 *
 * @return [Messages] Contains a list of messages.
 */
suspend fun TelegramFlow.getChatScheduledMessages(chatId: Long): Messages =
    this.sendFunctionAsync(TdApi.GetChatScheduledMessages(chatId))

/**
 * Suspend function, which returns sparse positions of messages of the specified type in the chat to
 * be used for shared media scroll implementation. Returns the results in reverse chronological order
 * (i.e., in order of decreasing messageId). Cannot be used in secret chats or with
 * searchMessagesFilterFailedToSend filter without an enabled message database.
 *
 * @param chatId Identifier of the chat in which to return information about message positions.
 * @param filter Filter for message content. Filters searchMessagesFilterEmpty,
 * searchMessagesFilterMention and searchMessagesFilterUnreadMention are unsupported in this function.
 *
 * @param fromMessageId The message identifier from which to return information about message
 * positions.
 * @param limit The expected number of message positions to be returned; 50-2000. A smaller number
 * of positions can be returned, if there are not enough appropriate messages.
 *
 * @return [MessagePositions] Contains a list of message positions.
 */
suspend fun TelegramFlow.getChatSparseMessagePositions(
    chatId: Long,
    filter: SearchMessagesFilter?,
    fromMessageId: Long,
    limit: Int,
): MessagePositions = this.sendFunctionAsync(
    TdApi.GetChatSparseMessagePositions(
        chatId, filter,
        fromMessageId, limit
    )
)

/**
 * Suspend function, which returns sponsored message to be shown in a chat; for channel chats only.
 * Returns a 404 error if there is no sponsored message in the chat.
 *
 * @param chatId Identifier of the chat.
 *
 * @return [SponsoredMessage] Describes a sponsored message.
 */
suspend fun TelegramFlow.getChatSponsoredMessage(chatId: Long): SponsoredMessage =
    this.sendFunctionAsync(TdApi.GetChatSponsoredMessage(chatId))

/**
 * Suspend function, which returns detailed statistics about a chat. Currently, this method can be
 * used only for supergroups and channels. Can be used only if supergroupFullInfo.canGetStatistics ==
 * true.
 *
 * @param chatId Chat identifier.
 * @param isDark Pass true if a dark theme is used by the application.
 *
 * @return [ChatStatistics] This class is an abstract base class.
 */
suspend fun TelegramFlow.getChatStatistics(chatId: Long, isDark: Boolean): ChatStatistics =
    this.sendFunctionAsync(TdApi.GetChatStatistics(chatId, isDark))

/**
 * Suspend function, which returns an ordered list of chats from the beginning of a chat list. For
 * informational purposes only. Use loadChats and updates processing instead to maintain chat lists in
 * a consistent state.
 *
 * @param chatList The chat list in which to return chats; pass null to get chats from the main chat
 * list.
 * @param limit The maximum number of chats to be returned.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getChats(chatList: ChatList?, limit: Int): Chats =
    this.sendFunctionAsync(TdApi.GetChats(chatList, limit))

/**
 * Suspend function, which returns a list of public chats of the specified type, owned by the user.
 *
 * @param type Type of the public chats to return.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getCreatedPublicChats(type: PublicChatType?): Chats =
    this.sendFunctionAsync(TdApi.GetCreatedPublicChats(type))

/**
 * Suspend function, which returns a list of recently inactive supergroups and channels. Can be used
 * when user reaches limit on the number of joined supergroups and channels and receives
 * CHANNELSTOOMUCH error.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getInactiveSupergroupChats(): Chats =
    this.sendFunctionAsync(TdApi.GetInactiveSupergroupChats())

/**
 * Suspend function, which returns recently opened chats, this is an offline request. Returns chats
 * in the order of last opening.
 *
 * @param limit The maximum number of chats to be returned.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getRecentlyOpenedChats(limit: Int): Chats =
    this.sendFunctionAsync(TdApi.GetRecentlyOpenedChats(limit))

/**
 * Suspend function, which returns recommended chat filters for the current user.
 *
 * @return [RecommendedChatFilters] Contains a list of recommended chat filters.
 */
suspend fun TelegramFlow.getRecommendedChatFilters(): RecommendedChatFilters =
    this.sendFunctionAsync(TdApi.GetRecommendedChatFilters())

/**
 * Suspend function, which returns information about a secret chat by its identifier. This is an
 * offline request.
 *
 * @param secretChatId Secret chat identifier.
 *
 * @return [SecretChat] Represents a secret chat.
 */
suspend fun TelegramFlow.getSecretChat(secretChatId: Int): SecretChat =
    this.sendFunctionAsync(TdApi.GetSecretChat(secretChatId))

/**
 * Suspend function, which returns a list of basic group and supergroup chats, which can be used as
 * a discussion group for a channel. Returned basic group chats must be first upgraded to supergroups
 * before they can be set as a discussion group. To set a returned supergroup as a discussion group,
 * access to its old messages must be enabled using toggleSupergroupIsAllHistoryAvailable first.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getSuitableDiscussionChats(): Chats =
    this.sendFunctionAsync(TdApi.GetSuitableDiscussionChats())

/**
 * Suspend function, which returns a list of frequently used chats. Supported only if the chat info
 * database is enabled.
 *
 * @param category Category of chats to be returned.
 * @param limit The maximum number of chats to be returned; up to 30.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.getTopChats(category: TopChatCategory?, limit: Int): Chats =
    this.sendFunctionAsync(TdApi.GetTopChats(category, limit))

/**
 * Suspend function, which returns list of participant identifiers, on whose behalf a video chat in
 * the chat can be joined.
 *
 * @param chatId Chat identifier.
 *
 * @return [MessageSenders] Represents a list of message senders.
 */
suspend fun TelegramFlow.getVideoChatAvailableParticipants(chatId: Long): MessageSenders =
    this.sendFunctionAsync(TdApi.GetVideoChatAvailableParticipants(chatId))

/**
 * Suspend function, which adds the current user as a new member to a chat. Private and secret chats
 * can't be joined using this method.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.joinChat(chatId: Long) = this.sendFunctionLaunch(TdApi.JoinChat(chatId))

/**
 * Suspend function, which uses an invite link to add the current user to the chat if possible.
 *
 * @param inviteLink Invite link to use.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.joinChatByInviteLink(inviteLink: String?): Chat =
    this.sendFunctionAsync(TdApi.JoinChatByInviteLink(inviteLink))

/**
 * Suspend function, which removes the current user from chat members. Private and secret chats
 * can't be left using this method.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.leaveChat(chatId: Long) = this.sendFunctionLaunch(TdApi.LeaveChat(chatId))

/**
 * Suspend function, which loads more chats from a chat list. The loaded chats and their positions
 * in the chat list will be sent through updates. Chats are sorted by the pair (chat.position.order,
 * chat.id) in descending order. Returns a 404 error if all chats have been loaded.
 *
 * @param chatList The chat list in which to load chats; pass null to load chats from the main chat
 * list.
 * @param limit The maximum number of chats to be loaded. For optimal performance, the number of
 * loaded chats is chosen by TDLib and can be smaller than the specified limit, even if the end of the
 * list is not reached.
 */
suspend fun TelegramFlow.loadChats(chatList: ChatList?, limit: Int) =
    this.sendFunctionLaunch(TdApi.LoadChats(chatList, limit))

/**
 * Suspend function, which informs TDLib that the chat is opened by the user. Many useful activities
 * depend on the chat being opened or closed (e.g., in supergroups and channels all updates are
 * received only for opened chats).
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.openChat(chatId: Long) = this.sendFunctionLaunch(TdApi.OpenChat(chatId))

/**
 * Suspend function, which pins a message in a chat; requires canPinMessages rights or
 * canEditMessages rights in the channel.
 *
 * @param chatId Identifier of the chat.
 * @param messageId Identifier of the new pinned message.
 * @param disableNotification True, if there must be no notification about the pinned message.
 * Notifications are always disabled in channels and private chats.
 * @param onlyForSelf True, if the message needs to be pinned for one side only; private chats only.
 */
suspend fun TelegramFlow.pinChatMessage(
    chatId: Long,
    messageId: Long,
    disableNotification: Boolean,
    onlyForSelf: Boolean,
) = this.sendFunctionLaunch(
    TdApi.PinChatMessage(
        chatId, messageId, disableNotification,
        onlyForSelf
    )
)

/**
 * Suspend function, which handles a pending join request in a chat.
 *
 * @param chatId Chat identifier.
 * @param userId Identifier of the user that sent the request.
 * @param approve True, if the request is approved. Otherwise the request is declived.
 */
suspend fun TelegramFlow.processChatJoinRequest(
    chatId: Long,
    userId: Long,
    approve: Boolean,
) = this.sendFunctionLaunch(TdApi.ProcessChatJoinRequest(chatId, userId, approve))

/**
 * Suspend function, which handles all pending join requests for a given link in a chat.
 *
 * @param chatId Chat identifier.
 * @param inviteLink Invite link for which to process join requests. If empty, all join requests
 * will be processed. Requires administrator privileges and canInviteUsers right in the chat for own
 * links and owner privileges for other links.
 * @param approve True, if the requests are approved. Otherwise the requests are declived.
 */
suspend fun TelegramFlow.processChatJoinRequests(
    chatId: Long,
    inviteLink: String?,
    approve: Boolean,
) = this.sendFunctionLaunch(TdApi.ProcessChatJoinRequests(chatId, inviteLink, approve))

/**
 * Suspend function, which marks all mentions in a chat as read.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.readAllChatMentions(chatId: Long) =
    this.sendFunctionLaunch(TdApi.ReadAllChatMentions(chatId))

/**
 * Suspend function, which removes a chat action bar without any other action.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.removeChatActionBar(chatId: Long) =
    this.sendFunctionLaunch(TdApi.RemoveChatActionBar(chatId))

/**
 * Suspend function, which removes a chat from the list of recently found chats.
 *
 * @param chatId Identifier of the chat to be removed.
 */
suspend fun TelegramFlow.removeRecentlyFoundChat(chatId: Long) =
    this.sendFunctionLaunch(TdApi.RemoveRecentlyFoundChat(chatId))

/**
 * Suspend function, which removes a chat from the list of frequently used chats. Supported only if
 * the chat info database is enabled.
 *
 * @param category Category of frequently used chats.
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.removeTopChat(category: TopChatCategory?, chatId: Long) =
    this.sendFunctionLaunch(TdApi.RemoveTopChat(category, chatId))

/**
 * Suspend function, which changes the order of chat filters.
 *
 * @param chatFilterIds Identifiers of chat filters in the new correct order.
 */
suspend fun TelegramFlow.reorderChatFilters(chatFilterIds: IntArray?) =
    this.sendFunctionLaunch(TdApi.ReorderChatFilters(chatFilterIds))

/**
 * Suspend function, which replaces current primary invite link for a chat with a new primary invite
 * link. Available for basic groups, supergroups, and channels. Requires administrator privileges and
 * canInviteUsers right.
 *
 * @param chatId Chat identifier.
 *
 * @return [ChatInviteLink] Contains a chat invite link.
 */
suspend fun TelegramFlow.replacePrimaryChatInviteLink(chatId: Long): ChatInviteLink =
    this.sendFunctionAsync(TdApi.ReplacePrimaryChatInviteLink(chatId))

/**
 * Suspend function, which reports a chat to the Telegram moderators. A chat can be reported only
 * from the chat action bar, or if chat.canBeReported.
 *
 * @param chatId Chat identifier.
 * @param messageIds Identifiers of reported messages, if any.
 * @param reason The reason for reporting the chat.
 * @param text Additional report details; 0-1024 characters.
 */
suspend fun TelegramFlow.reportChat(
    chatId: Long,
    messageIds: LongArray?,
    reason: ChatReportReason?,
    text: String?,
) = this.sendFunctionLaunch(TdApi.ReportChat(chatId, messageIds, reason, text))

/**
 * Suspend function, which reports a chat photo to the Telegram moderators. A chat photo can be
 * reported only if chat.canBeReported.
 *
 * @param chatId Chat identifier.
 * @param fileId Identifier of the photo to report. Only full photos from chatPhoto can be reported.
 *
 * @param reason The reason for reporting the chat photo.
 * @param text Additional report details; 0-1024 characters.
 */
suspend fun TelegramFlow.reportChatPhoto(
    chatId: Long,
    fileId: Int,
    reason: ChatReportReason?,
    text: String?,
) = this.sendFunctionLaunch(TdApi.ReportChatPhoto(chatId, fileId, reason, text))

/**
 * Suspend function, which revokes invite link for a chat. Available for basic groups, supergroups,
 * and channels. Requires administrator privileges and canInviteUsers right in the chat for own links
 * and owner privileges for other links. If a primary link is revoked, then additionally to the revoked
 * link returns new primary link.
 *
 * @param chatId Chat identifier.
 * @param inviteLink Invite link to be revoked.
 *
 * @return [ChatInviteLinks] Contains a list of chat invite links.
 */
suspend fun TelegramFlow.revokeChatInviteLink(chatId: Long, inviteLink: String?): ChatInviteLinks =
    this.sendFunctionAsync(TdApi.RevokeChatInviteLink(chatId, inviteLink))

/**
 * Suspend function, which searches for a specified query in the first name, last name and username
 * of the members of a specified chat. Requires administrator rights in channels.
 *
 * @param chatId Chat identifier.
 * @param query Query to search for.
 * @param limit The maximum number of users to be returned; up to 200.
 * @param filter The type of users to search for; pass null to search among all chat members.
 *
 * @return [ChatMembers] Contains a list of chat members.
 */
suspend fun TelegramFlow.searchChatMembers(
    chatId: Long,
    query: String?,
    limit: Int,
    filter: ChatMembersFilter?,
): ChatMembers = this.sendFunctionAsync(TdApi.SearchChatMembers(chatId, query, limit, filter))

/**
 * Suspend function, which searches for messages with given words in the chat. Returns the results
 * in reverse chronological order, i.e. in order of decreasing messageId. Cannot be used in secret
 * chats with a non-empty query (searchSecretMessages must be used instead), or without an enabled
 * message database. For optimal performance, the number of returned messages is chosen by TDLib and
 * can be smaller than the specified limit.
 *
 * @param chatId Identifier of the chat in which to search messages.
 * @param query Query to search for.
 * @param senderId Identifier of the sender of messages to search for; pass null to search for
 * messages from any sender. Not supported in secret chats.
 * @param fromMessageId Identifier of the message starting from which history must be fetched; use 0
 * to get results from the last message.
 * @param offset Specify 0 to get results from exactly the fromMessageId or a negative offset to get
 * the specified message and some newer messages.
 * @param limit The maximum number of messages to be returned; must be positive and can't be greater
 * than 100. If the offset is negative, the limit must be greater than -offset. For optimal
 * performance, the number of returned messages is chosen by TDLib and can be smaller than the
 * specified limit.
 * @param filter Additional filter for messages to search; pass null to search for all messages.
 * @param messageThreadId If not 0, only messages in the specified thread will be returned;
 * supergroups only.
 *
 * @return [Messages] Contains a list of messages.
 */
suspend fun TelegramFlow.searchChatMessages(
    chatId: Long,
    query: String?,
    senderId: MessageSender?,
    fromMessageId: Long,
    offset: Int,
    limit: Int,
    filter: SearchMessagesFilter?,
    messageThreadId: Long,
): Messages = this.sendFunctionAsync(
    TdApi.SearchChatMessages(
        chatId, query, senderId,
        fromMessageId, offset, limit, filter, messageThreadId
    )
)

/**
 * Suspend function, which returns information about the recent locations of chat members that were
 * sent to the chat. Returns up to 1 location message per user.
 *
 * @param chatId Chat identifier.
 * @param limit The maximum number of messages to be returned.
 *
 * @return [Messages] Contains a list of messages.
 */
suspend fun TelegramFlow.searchChatRecentLocationMessages(chatId: Long, limit: Int): Messages =
    this.sendFunctionAsync(TdApi.SearchChatRecentLocationMessages(chatId, limit))

/**
 * Suspend function, which searches for the specified query in the title and username of already
 * known chats, this is an offline request. Returns chats in the order seen in the main chat list.
 *
 * @param query Query to search for. If the query is empty, returns up to 50 recently found chats.
 * @param limit The maximum number of chats to be returned.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.searchChats(query: String?, limit: Int): Chats =
    this.sendFunctionAsync(TdApi.SearchChats(query, limit))

/**
 * Suspend function, which returns a list of users and location-based supergroups nearby. The list
 * of users nearby will be updated for 60 seconds after the request by the updates updateUsersNearby.
 * The request must be sent again every 25 seconds with adjusted location to not miss new chats.
 *
 * @param location Current user location.
 *
 * @return [ChatsNearby] Represents a list of chats located nearby.
 */
suspend fun TelegramFlow.searchChatsNearby(location: Location?): ChatsNearby =
    this.sendFunctionAsync(TdApi.SearchChatsNearby(location))

/**
 * Suspend function, which searches for the specified query in the title and username of already
 * known chats via request to the server. Returns chats in the order seen in the main chat list.
 *
 * @param query Query to search for.
 * @param limit The maximum number of chats to be returned.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.searchChatsOnServer(query: String?, limit: Int): Chats =
    this.sendFunctionAsync(TdApi.SearchChatsOnServer(query, limit))

/**
 * Suspend function, which searches a public chat by its username. Currently, only private chats,
 * supergroups and channels can be public. Returns the chat if found; otherwise an error is returned.
 *
 * @param username Username to be resolved.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.searchPublicChat(username: String?): Chat =
    this.sendFunctionAsync(TdApi.SearchPublicChat(username))

/**
 * Suspend function, which searches public chats by looking for specified query in their username
 * and title. Currently, only private chats, supergroups and channels can be public. Returns a
 * meaningful number of results. Excludes private chats with contacts and chats from the chat list from
 * the results.
 *
 * @param query Query to search for.
 *
 * @return [Chats] Represents a list of chats.
 */
suspend fun TelegramFlow.searchPublicChats(query: String?): Chats =
    this.sendFunctionAsync(TdApi.SearchPublicChats(query))

/**
 * Suspend function, which sends a notification about user activity in a chat.
 *
 * @param chatId Chat identifier.
 * @param messageThreadId If not 0, a message thread identifier in which the action was performed.
 * @param action The action description; pass null to cancel the currently active action.
 */
suspend fun TelegramFlow.sendChatAction(
    chatId: Long,
    messageThreadId: Long,
    action: ChatAction?,
) = this.sendFunctionLaunch(TdApi.SendChatAction(chatId, messageThreadId, action))

/**
 * Suspend function, which sends a notification about a screenshot taken in a chat. Supported only
 * in private and secret chats.
 *
 * @param chatId Chat identifier.
 */
suspend fun TelegramFlow.sendChatScreenshotTakenNotification(chatId: Long) =
    this.sendFunctionLaunch(TdApi.SendChatScreenshotTakenNotification(chatId))

/**
 * Suspend function, which changes application-specific data associated with a chat.
 *
 * @param chatId Chat identifier.
 * @param clientData New value of clientData.
 */
suspend fun TelegramFlow.setChatClientData(chatId: Long, clientData: String?) =
    this.sendFunctionLaunch(TdApi.SetChatClientData(chatId, clientData))

/**
 * Suspend function, which changes information about a chat. Available for basic groups,
 * supergroups, and channels. Requires canChangeInfo administrator right.
 *
 * @param chatId Identifier of the chat.
 * @param description New chat description; 0-255 characters.
 */
suspend fun TelegramFlow.setChatDescription(chatId: Long, description: String?) =
    this.sendFunctionLaunch(TdApi.SetChatDescription(chatId, description))

/**
 * Suspend function, which changes the discussion group of a channel chat; requires canChangeInfo
 * administrator right in the channel if it is specified.
 *
 * @param chatId Identifier of the channel chat. Pass 0 to remove a link from the supergroup passed
 * in the second argument to a linked channel chat (requires canPinMessages rights in the supergroup).
 *
 * @param discussionChatId Identifier of a new channel's discussion group. Use 0 to remove the
 * discussion group. Use the method getSuitableDiscussionChats to find all suitable groups. Basic group
 * chats must be first upgraded to supergroup chats. If new chat members don't have access to old
 * messages in the supergroup, then toggleSupergroupIsAllHistoryAvailable must be used first to change
 * that.
 */
suspend fun TelegramFlow.setChatDiscussionGroup(chatId: Long, discussionChatId: Long) =
    this.sendFunctionLaunch(TdApi.SetChatDiscussionGroup(chatId, discussionChatId))

/**
 * Suspend function, which changes the draft message in a chat.
 *
 * @param chatId Chat identifier.
 * @param messageThreadId If not 0, a message thread identifier in which the draft was changed.
 * @param draftMessage New draft message; pass null to remove the draft.
 */
suspend fun TelegramFlow.setChatDraftMessage(
    chatId: Long,
    messageThreadId: Long,
    draftMessage: DraftMessage?,
) = this.sendFunctionLaunch(TdApi.SetChatDraftMessage(chatId, messageThreadId, draftMessage))

/**
 * Suspend function, which changes the location of a chat. Available only for some location-based
 * supergroups, use supergroupFullInfo.canSetLocation to check whether the method is allowed to use.
 *
 * @param chatId Chat identifier.
 * @param location New location for the chat; must be valid and not null.
 */
suspend fun TelegramFlow.setChatLocation(chatId: Long, location: ChatLocation?) =
    this.sendFunctionLaunch(TdApi.SetChatLocation(chatId, location))

/**
 * Suspend function, which changes the status of a chat member, needs appropriate privileges. This
 * function is currently not suitable for transferring chat ownership; use transferChatOwnership
 * instead. Use addChatMember or banChatMember if some additional parameters needs to be passed.
 *
 * @param chatId Chat identifier.
 * @param memberId Member identifier. Chats can be only banned and unbanned in supergroups and
 * channels.
 * @param status The new status of the member in the chat.
 */
suspend fun TelegramFlow.setChatMemberStatus(
    chatId: Long,
    memberId: MessageSender?,
    status: ChatMemberStatus?,
) = this.sendFunctionLaunch(TdApi.SetChatMemberStatus(chatId, memberId, status))

/**
 * Suspend function, which selects a message sender to send messages in a chat.
 *
 * @param chatId Chat identifier.
 * @param messageSenderId New message sender for the chat.
 */
suspend fun TelegramFlow.setChatMessageSender(chatId: Long, messageSenderId: MessageSender?) =
    this.sendFunctionLaunch(TdApi.SetChatMessageSender(chatId, messageSenderId))

/**
 * Suspend function, which changes the message TTL in a chat. Requires canDeleteMessages
 * administrator right in basic groups, supergroups and channels Message TTL can't be changed in a chat
 * with the current user (Saved Messages) and the chat 777000 (Telegram.)
 *
 * @param chatId Chat identifier.
 * @param ttl New TTL value, in seconds; must be one of 0, 86400, 7 * 86400, or 31 * 86400 unless
 * the chat is secret.
 */
suspend fun TelegramFlow.setChatMessageTtl(chatId: Long, ttl: Int) =
    this.sendFunctionLaunch(TdApi.SetChatMessageTtl(chatId, ttl))

/**
 * Suspend function, which changes the notification settings of a chat. Notification settings of a
 * chat with the current user (Saved Messages) can't be changed.
 *
 * @param chatId Chat identifier.
 * @param notificationSettings New notification settings for the chat. If the chat is muted for more
 * than 1 week, it is considered to be muted forever.
 */
suspend fun TelegramFlow.setChatNotificationSettings(
    chatId: Long,
    notificationSettings: ChatNotificationSettings?,
) =
    this.sendFunctionLaunch(TdApi.SetChatNotificationSettings(chatId, notificationSettings))

/**
 * Suspend function, which changes the chat members permissions. Supported only for basic groups and
 * supergroups. Requires canRestrictMembers administrator right.
 *
 * @param chatId Chat identifier.
 * @param permissions New non-administrator members permissions in the chat.
 */
suspend fun TelegramFlow.setChatPermissions(chatId: Long, permissions: ChatPermissions?) =
    this.sendFunctionLaunch(TdApi.SetChatPermissions(chatId, permissions))

/**
 * Suspend function, which changes the photo of a chat. Supported only for basic groups, supergroups
 * and channels. Requires canChangeInfo administrator right.
 *
 * @param chatId Chat identifier.
 * @param photo New chat photo; pass null to delete the chat photo.
 */
suspend fun TelegramFlow.setChatPhoto(chatId: Long, photo: InputChatPhoto?) =
    this.sendFunctionLaunch(TdApi.SetChatPhoto(chatId, photo))

/**
 * Suspend function, which changes the slow mode delay of a chat. Available only for supergroups;
 * requires canRestrictMembers rights.
 *
 * @param chatId Chat identifier.
 * @param slowModeDelay New slow mode delay for the chat, in seconds; must be one of 0, 10, 30, 60,
 * 300, 900, 3600.
 */
suspend fun TelegramFlow.setChatSlowModeDelay(chatId: Long, slowModeDelay: Int) =
    this.sendFunctionLaunch(TdApi.SetChatSlowModeDelay(chatId, slowModeDelay))

/**
 * Suspend function, which changes the chat theme. Supported only in private and secret chats.
 *
 * @param chatId Chat identifier.
 * @param themeName Name of the new chat theme; pass an empty string to return the default theme.
 */
suspend fun TelegramFlow.setChatTheme(chatId: Long, themeName: String?) =
    this.sendFunctionLaunch(TdApi.SetChatTheme(chatId, themeName))

/**
 * Suspend function, which changes the chat title. Supported only for basic groups, supergroups and
 * channels. Requires canChangeInfo administrator right.
 *
 * @param chatId Chat identifier.
 * @param title New title of the chat; 1-128 characters.
 */
suspend fun TelegramFlow.setChatTitle(chatId: Long, title: String?) =
    this.sendFunctionLaunch(TdApi.SetChatTitle(chatId, title))

/**
 * Suspend function, which changes the order of pinned chats.
 *
 * @param chatList Chat list in which to change the order of pinned chats.
 * @param chatIds The new list of pinned chats.
 */
suspend fun TelegramFlow.setPinnedChats(chatList: ChatList?, chatIds: LongArray?) =
    this.sendFunctionLaunch(TdApi.SetPinnedChats(chatList, chatIds))

/**
 * Suspend function, which changes default participant identifier, on whose behalf a video chat in
 * the chat will be joined.
 *
 * @param chatId Chat identifier.
 * @param defaultParticipantId Default group call participant identifier to join the video chats.
 */
suspend fun TelegramFlow.setVideoChatDefaultParticipant(
    chatId: Long,
    defaultParticipantId: MessageSender?,
) =
    this.sendFunctionLaunch(TdApi.SetVideoChatDefaultParticipant(chatId, defaultParticipantId))

/**
 * Suspend function, which changes the value of the default disableNotification parameter, used when
 * a message is sent to a chat.
 *
 * @param chatId Chat identifier.
 * @param defaultDisableNotification New value of defaultDisableNotification.
 */
suspend fun TelegramFlow.toggleChatDefaultDisableNotification(
    chatId: Long,
    defaultDisableNotification: Boolean,
) =
    this.sendFunctionLaunch(
        TdApi.ToggleChatDefaultDisableNotification(
            chatId,
            defaultDisableNotification
        )
    )

/**
 * Suspend function, which changes the ability of users to save, forward, or copy chat content.
 * Supported only for basic groups, supergroups and channels. Requires owner privileges.
 *
 * @param chatId Chat identifier.
 * @param hasProtectedContent True, if chat content can't be saved locally, forwarded, or copied.
 */
suspend fun TelegramFlow.toggleChatHasProtectedContent(chatId: Long, hasProtectedContent: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleChatHasProtectedContent(chatId, hasProtectedContent))

/**
 * Suspend function, which changes the marked as unread state of a chat.
 *
 * @param chatId Chat identifier.
 * @param isMarkedAsUnread New value of isMarkedAsUnread.
 */
suspend fun TelegramFlow.toggleChatIsMarkedAsUnread(chatId: Long, isMarkedAsUnread: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleChatIsMarkedAsUnread(chatId, isMarkedAsUnread))

/**
 * Suspend function, which changes the pinned state of a chat. There can be up to
 * GetOption(&quot;pinned_chat_count_max&quot;)/GetOption(&quot;pinned_archived_chat_count_max&quot;)
 * pinned non-secret chats and the same number of secret chats in the main/arhive chat list.
 *
 * @param chatList Chat list in which to change the pinned state of the chat.
 * @param chatId Chat identifier.
 * @param isPinned True, if the chat is pinned.
 */
suspend fun TelegramFlow.toggleChatIsPinned(
    chatList: ChatList?,
    chatId: Long,
    isPinned: Boolean,
) = this.sendFunctionLaunch(TdApi.ToggleChatIsPinned(chatList, chatId, isPinned))

/**
 * Suspend function, which toggles whether a session can accept incoming secret chats.
 *
 * @param sessionId Session identifier.
 * @param canAcceptSecretChats True, if incoming secret chats can be accepted by the session.
 */
suspend fun TelegramFlow.toggleSessionCanAcceptSecretChats(
    sessionId: Long,
    canAcceptSecretChats: Boolean,
) =
    this.sendFunctionLaunch(
        TdApi.ToggleSessionCanAcceptSecretChats(
            sessionId,
            canAcceptSecretChats
        )
    )

/**
 * Suspend function, which changes the owner of a chat. The current user must be a current owner of
 * the chat. Use the method canTransferOwnership to check whether the ownership can be transferred from
 * the current session. Available only for supergroups and channel chats.
 *
 * @param chatId Chat identifier.
 * @param userId Identifier of the user to which transfer the ownership. The ownership can't be
 * transferred to a bot or to a deleted user.
 * @param password The password of the current user.
 */
suspend fun TelegramFlow.transferChatOwnership(
    chatId: Long,
    userId: Long,
    password: String?,
) = this.sendFunctionLaunch(TdApi.TransferChatOwnership(chatId, userId, password))

/**
 * Suspend function, which removes all pinned messages from a chat; requires canPinMessages rights
 * in the group or canEditMessages rights in the channel.
 *
 * @param chatId Identifier of the chat.
 */
suspend fun TelegramFlow.unpinAllChatMessages(chatId: Long) =
    this.sendFunctionLaunch(TdApi.UnpinAllChatMessages(chatId))

/**
 * Suspend function, which removes a pinned message from a chat; requires canPinMessages rights in
 * the group or canEditMessages rights in the channel.
 *
 * @param chatId Identifier of the chat.
 * @param messageId Identifier of the removed pinned message.
 */
suspend fun TelegramFlow.unpinChatMessage(chatId: Long, messageId: Long) =
    this.sendFunctionLaunch(TdApi.UnpinChatMessage(chatId, messageId))

/**
 * Suspend function, which creates a new supergroup from an existing basic group and sends a
 * corresponding messageChatUpgradeTo and messageChatUpgradeFrom; requires creator privileges.
 * Deactivates the original basic group.
 *
 * @param chatId Identifier of the chat to upgrade.
 *
 * @return [Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
 */
suspend fun TelegramFlow.upgradeBasicGroupChatToSupergroupChat(chatId: Long): Chat =
    this.sendFunctionAsync(TdApi.UpgradeBasicGroupChatToSupergroupChat(chatId))
