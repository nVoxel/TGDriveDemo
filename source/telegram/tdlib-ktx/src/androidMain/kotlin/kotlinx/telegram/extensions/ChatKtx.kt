//
// NOTE: THIS FILE IS AUTO-GENERATED by the "ExtensionsGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package kotlinx.telegram.extensions

import kotlinx.telegram.core.TelegramFlow
import kotlinx.telegram.coroutines.addChatMember
import kotlinx.telegram.coroutines.addChatMembers
import kotlinx.telegram.coroutines.addChatToList
import kotlinx.telegram.coroutines.addLocalMessage
import kotlinx.telegram.coroutines.addRecentlyFoundChat
import kotlinx.telegram.coroutines.banChatMember
import kotlinx.telegram.coroutines.checkChatUsername
import kotlinx.telegram.coroutines.clickAnimatedEmojiMessage
import kotlinx.telegram.coroutines.closeChat
import kotlinx.telegram.coroutines.createChatInviteLink
import kotlinx.telegram.coroutines.createVideoChat
import kotlinx.telegram.coroutines.deleteAllRevokedChatInviteLinks
import kotlinx.telegram.coroutines.deleteChat
import kotlinx.telegram.coroutines.deleteChatHistory
import kotlinx.telegram.coroutines.deleteChatMessagesByDate
import kotlinx.telegram.coroutines.deleteChatMessagesBySender
import kotlinx.telegram.coroutines.deleteChatReplyMarkup
import kotlinx.telegram.coroutines.deleteMessages
import kotlinx.telegram.coroutines.deleteRevokedChatInviteLink
import kotlinx.telegram.coroutines.editChatInviteLink
import kotlinx.telegram.coroutines.editMessageCaption
import kotlinx.telegram.coroutines.editMessageLiveLocation
import kotlinx.telegram.coroutines.editMessageMedia
import kotlinx.telegram.coroutines.editMessageReplyMarkup
import kotlinx.telegram.coroutines.editMessageSchedulingState
import kotlinx.telegram.coroutines.editMessageText
import kotlinx.telegram.coroutines.forwardMessages
import kotlinx.telegram.coroutines.getCallbackQueryAnswer
import kotlinx.telegram.coroutines.getCallbackQueryMessage
import kotlinx.telegram.coroutines.getChat
import kotlinx.telegram.coroutines.getChatAdministrators
import kotlinx.telegram.coroutines.getChatAvailableMessageSenders
import kotlinx.telegram.coroutines.getChatEventLog
import kotlinx.telegram.coroutines.getChatHistory
import kotlinx.telegram.coroutines.getChatInviteLink
import kotlinx.telegram.coroutines.getChatInviteLinkCounts
import kotlinx.telegram.coroutines.getChatInviteLinkMembers
import kotlinx.telegram.coroutines.getChatInviteLinks
import kotlinx.telegram.coroutines.getChatJoinRequests
import kotlinx.telegram.coroutines.getChatListsToAddChat
import kotlinx.telegram.coroutines.getChatMember
import kotlinx.telegram.coroutines.getChatMessageByDate
import kotlinx.telegram.coroutines.getChatMessageCalendar
import kotlinx.telegram.coroutines.getChatMessageCount
import kotlinx.telegram.coroutines.getChatPinnedMessage
import kotlinx.telegram.coroutines.getChatScheduledMessages
import kotlinx.telegram.coroutines.getChatSparseMessagePositions
import kotlinx.telegram.coroutines.getChatSponsoredMessage
import kotlinx.telegram.coroutines.getChatStatistics
import kotlinx.telegram.coroutines.getGameHighScores
import kotlinx.telegram.coroutines.getInlineQueryResults
import kotlinx.telegram.coroutines.getLoginUrl
import kotlinx.telegram.coroutines.getLoginUrlInfo
import kotlinx.telegram.coroutines.getMapThumbnailFile
import kotlinx.telegram.coroutines.getMessage
import kotlinx.telegram.coroutines.getMessageEmbeddingCode
import kotlinx.telegram.coroutines.getMessageImportConfirmationText
import kotlinx.telegram.coroutines.getMessageLink
import kotlinx.telegram.coroutines.getMessageLocally
import kotlinx.telegram.coroutines.getMessagePublicForwards
import kotlinx.telegram.coroutines.getMessageStatistics
import kotlinx.telegram.coroutines.getMessageThread
import kotlinx.telegram.coroutines.getMessageThreadHistory
import kotlinx.telegram.coroutines.getMessageViewers
import kotlinx.telegram.coroutines.getMessages
import kotlinx.telegram.coroutines.getPaymentForm
import kotlinx.telegram.coroutines.getPaymentReceipt
import kotlinx.telegram.coroutines.getPollVoters
import kotlinx.telegram.coroutines.getRepliedMessage
import kotlinx.telegram.coroutines.getStatisticalGraph
import kotlinx.telegram.coroutines.getVideoChatAvailableParticipants
import kotlinx.telegram.coroutines.importMessages
import kotlinx.telegram.coroutines.joinChat
import kotlinx.telegram.coroutines.leaveChat
import kotlinx.telegram.coroutines.openChat
import kotlinx.telegram.coroutines.openMessageContent
import kotlinx.telegram.coroutines.pinChatMessage
import kotlinx.telegram.coroutines.processChatJoinRequest
import kotlinx.telegram.coroutines.processChatJoinRequests
import kotlinx.telegram.coroutines.readAllChatMentions
import kotlinx.telegram.coroutines.removeChatActionBar
import kotlinx.telegram.coroutines.removeRecentlyFoundChat
import kotlinx.telegram.coroutines.removeTopChat
import kotlinx.telegram.coroutines.replacePrimaryChatInviteLink
import kotlinx.telegram.coroutines.reportChat
import kotlinx.telegram.coroutines.reportChatPhoto
import kotlinx.telegram.coroutines.resendMessages
import kotlinx.telegram.coroutines.revokeChatInviteLink
import kotlinx.telegram.coroutines.saveApplicationLogEvent
import kotlinx.telegram.coroutines.searchChatMembers
import kotlinx.telegram.coroutines.searchChatMessages
import kotlinx.telegram.coroutines.searchChatRecentLocationMessages
import kotlinx.telegram.coroutines.searchSecretMessages
import kotlinx.telegram.coroutines.sendBotStartMessage
import kotlinx.telegram.coroutines.sendChatAction
import kotlinx.telegram.coroutines.sendChatScreenshotTakenNotification
import kotlinx.telegram.coroutines.sendInlineQueryResultMessage
import kotlinx.telegram.coroutines.sendMessage
import kotlinx.telegram.coroutines.sendMessageAlbum
import kotlinx.telegram.coroutines.sendPaymentForm
import kotlinx.telegram.coroutines.setChatClientData
import kotlinx.telegram.coroutines.setChatDescription
import kotlinx.telegram.coroutines.setChatDiscussionGroup
import kotlinx.telegram.coroutines.setChatDraftMessage
import kotlinx.telegram.coroutines.setChatLocation
import kotlinx.telegram.coroutines.setChatMemberStatus
import kotlinx.telegram.coroutines.setChatMessageSender
import kotlinx.telegram.coroutines.setChatMessageTtl
import kotlinx.telegram.coroutines.setChatNotificationSettings
import kotlinx.telegram.coroutines.setChatPermissions
import kotlinx.telegram.coroutines.setChatPhoto
import kotlinx.telegram.coroutines.setChatSlowModeDelay
import kotlinx.telegram.coroutines.setChatTheme
import kotlinx.telegram.coroutines.setChatTitle
import kotlinx.telegram.coroutines.setGameScore
import kotlinx.telegram.coroutines.setPollAnswer
import kotlinx.telegram.coroutines.setVideoChatDefaultParticipant
import kotlinx.telegram.coroutines.stopPoll
import kotlinx.telegram.coroutines.toggleChatDefaultDisableNotification
import kotlinx.telegram.coroutines.toggleChatHasProtectedContent
import kotlinx.telegram.coroutines.toggleChatIsMarkedAsUnread
import kotlinx.telegram.coroutines.toggleChatIsPinned
import kotlinx.telegram.coroutines.transferChatOwnership
import kotlinx.telegram.coroutines.unpinAllChatMessages
import kotlinx.telegram.coroutines.unpinChatMessage
import kotlinx.telegram.coroutines.upgradeBasicGroupChatToSupergroupChat
import kotlinx.telegram.coroutines.validateOrderInfo
import kotlinx.telegram.coroutines.viewMessages
import org.drinkless.td.libcore.telegram.TdApi.*

/**
 * Interface for access [TdApi.Chat] extension functions. Can be used alongside with other extension
 * interfaces of the package. Must contain [TelegramFlow] instance field to access its functionality
 */
interface ChatKtx : BaseKtx {
    /**
     * Instance of the [TelegramFlow] connecting extensions to the Telegram Client
     */
    override val api: TelegramFlow

    /**
     * Suspend function, which adds a new member to a chat. Members can't be added to private or
     * secret chats.
     *
     * @param userId Identifier of the user.
     * @param forwardLimit The number of earlier messages from the chat to be forwarded to the new
     * member; up to 100. Ignored for supergroups and channels, or if the added user is a bot.
     */
    suspend fun Chat.addMember(userId: Long, forwardLimit: Int) = api.addChatMember(
        this.id, userId,
        forwardLimit
    )

    /**
     * Suspend function, which adds multiple new members to a chat. Currently, this method is only
     * available for supergroups and channels. This method can't be used to join a chat. Members can't be
     * added to a channel if it has more than 200 members.
     *
     * @param userIds Identifiers of the users to be added to the chat. The maximum number of added
     * users is 20 for supergroups and 100 for channels.
     */
    suspend fun Chat.addMembers(userIds: LongArray?) = api.addChatMembers(this.id, userIds)

    /**
     * Suspend function, which adds a chat to a chat list. A chat can't be simultaneously in Main and
     * Archive chat lists, so it is automatically removed from another one if needed.
     *
     * @param chatList The chat list. Use getChatListsToAddChat to get suitable chat lists.
     */
    suspend fun Chat.addToList(chatList: ChatList?) = api.addChatToList(this.id, chatList)

    /**
     * Suspend function, which adds a local message to a chat. The message is persistent across
     * application restarts only if the message database is used. Returns the added message.
     *
     * @param senderId Identifier of the sender of the message.
     * @param replyToMessageId Identifier of the message to reply to or 0.
     * @param disableNotification Pass true to disable notification for the message.
     * @param inputMessageContent The content of the message to be added.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.addLocalMessage(
        senderId: MessageSender?,
        replyToMessageId: Long,
        disableNotification: Boolean,
        inputMessageContent: InputMessageContent?,
    ) = api.addLocalMessage(
        this.id, senderId, replyToMessageId, disableNotification,
        inputMessageContent
    )

    /**
     * Suspend function, which adds a chat to the list of recently found chats. The chat is added to
     * the beginning of the list. If the chat is already in the list, it will be removed from the list
     * first.
     */
    suspend fun Chat.addRecentlyFound() = api.addRecentlyFoundChat(this.id)

    /**
     * Suspend function, which bans a member in a chat. Members can't be banned in private or secret
     * chats. In supergroups and channels, the user will not be able to return to the group on their own
     * using invite links, etc., unless unbanned first.
     *
     * @param memberId Member identifier.
     * @param bannedUntilDate Point in time (Unix timestamp) when the user will be unbanned; 0 if
     * never. If the user is banned for more than 366 days or for less than 30 seconds from the current
     * time, the user is considered to be banned forever. Ignored in basic groups and if a chat is
     * banned.
     * @param revokeMessages Pass true to delete all messages in the chat for the user that is being
     * removed. Always true for supergroups and channels.
     */
    suspend fun Chat.banMember(
        memberId: MessageSender?,
        bannedUntilDate: Int,
        revokeMessages: Boolean,
    ) = api.banChatMember(this.id, memberId, bannedUntilDate, revokeMessages)

    /**
     * Suspend function, which checks whether a username can be set for a chat.
     *
     * @param username Username to be checked.
     *
     * @return [TdApi.CheckChatUsernameResult] This class is an abstract base class.
     */
    suspend fun Chat.checkUsername(username: String?) = api.checkChatUsername(this.id, username)

    /**
     * Suspend function, which informs TDLib that a message with an animated emoji was clicked by the
     * user. Returns a big animated sticker to be played or a 404 error if usual animation needs to be
     * played.
     *
     * @param messageId Identifier of the clicked message.
     *
     * @return [TdApi.Sticker] Describes a sticker.
     */
    suspend fun Chat.clickAnimatedEmojiMessage(messageId: Long) =
        api.clickAnimatedEmojiMessage(this.id, messageId)

    /**
     * Suspend function, which informs TDLib that the chat is closed by the user. Many useful
     * activities depend on the chat being opened or closed.
     */
    suspend fun Chat.close() = api.closeChat(this.id)

    /**
     * Suspend function, which creates a new invite link for a chat. Available for basic groups,
     * supergroups, and channels. Requires administrator privileges and canInviteUsers right in the chat.
     *
     * @param name Invite link name; 0-32 characters.
     * @param expirationDate Point in time (Unix timestamp) when the link will expire; pass 0 if
     * never.
     * @param memberLimit The maximum number of chat members that can join the chat via the link
     * simultaneously; 0-99999; pass 0 if not limited.
     * @param createsJoinRequest True, if the link only creates join request. If true, memberLimit
     * must not be specified.
     *
     * @return [TdApi.ChatInviteLink] Contains a chat invite link.
     */
    suspend fun Chat.createInviteLink(
        name: String?,
        expirationDate: Int,
        memberLimit: Int,
        createsJoinRequest: Boolean,
    ) = api.createChatInviteLink(this.id, name, expirationDate, memberLimit, createsJoinRequest)

    /**
     * Suspend function, which creates a video chat (a group call bound to a chat). Available only for
     * basic groups, supergroups and channels; requires canManageVideoChats rights.
     *
     * @param title Group call title; if empty, chat title will be used.
     * @param startDate Point in time (Unix timestamp) when the group call is supposed to be started
     * by an administrator; 0 to start the video chat immediately. The date must be at least 10 seconds
     * and at most 8 days in the future.
     *
     * @return [TdApi.GroupCallId] Contains the group call identifier.
     */
    suspend fun Chat.createVideo(title: String?, startDate: Int) = api.createVideoChat(
        this.id, title,
        startDate
    )

    /**
     * Suspend function, which deletes all revoked chat invite links created by a given chat
     * administrator. Requires administrator privileges and canInviteUsers right in the chat for own
     * links and owner privileges for other links.
     *
     * @param creatorUserId User identifier of a chat administrator, which links will be deleted. Must
     * be an identifier of the current user for non-owner.
     */
    suspend fun Chat.deleteAllRevokedInviteLinks(creatorUserId: Long) =
        api.deleteAllRevokedChatInviteLinks(this.id, creatorUserId)

    /**
     * Suspend function, which deletes a chat along with all messages in the corresponding chat for
     * all chat members; requires owner privileges. For group chats this will release the username and
     * remove all members. Chats with more than 1000 members can't be deleted using this method.
     */
    suspend fun Chat.delete() = api.deleteChat(this.id)

    /**
     * Suspend function, which deletes all messages in the chat. Use chat.canBeDeletedOnlyForSelf and
     * chat.canBeDeletedForAllUsers fields to find whether and how the method can be applied to the chat.
     *
     * @param removeFromChatList Pass true if the chat needs to be removed from the chat list.
     * @param revoke Pass true to delete chat history for all users.
     */
    suspend fun Chat.deleteHistory(removeFromChatList: Boolean, revoke: Boolean) =
        api.deleteChatHistory(this.id, removeFromChatList, revoke)

    /**
     * Suspend function, which deletes all messages between the specified dates in a chat. Supported
     * only for private chats and basic groups. Messages sent in the last 30 seconds will not be deleted.
     *
     * @param minDate The minimum date of the messages to delete.
     * @param maxDate The maximum date of the messages to delete.
     * @param revoke Pass true to delete chat messages for all users; private chats only.
     */
    suspend fun Chat.deleteMessagesByDate(
        minDate: Int,
        maxDate: Int,
        revoke: Boolean,
    ) = api.deleteChatMessagesByDate(this.id, minDate, maxDate, revoke)

    /**
     * Suspend function, which deletes all messages sent by the specified message sender in a chat.
     * Supported only for supergroups; requires canDeleteMessages administrator privileges.
     *
     * @param senderId Identifier of the sender of messages to delete.
     */
    suspend fun Chat.deleteMessagesBySender(senderId: MessageSender?) =
        api.deleteChatMessagesBySender(this.id, senderId)

    /**
     * Suspend function, which deletes the default reply markup from a chat. Must be called after a
     * one-time keyboard or a ForceReply reply markup has been used. UpdateChatReplyMarkup will be sent
     * if the reply markup is changed.
     *
     * @param messageId The message identifier of the used keyboard.
     */
    suspend fun Chat.deleteReplyMarkup(messageId: Long) = api.deleteChatReplyMarkup(
        this.id,
        messageId
    )

    /**
     * Suspend function, which deletes messages.
     *
     * @param messageIds Identifiers of the messages to be deleted.
     * @param revoke Pass true to delete messages for all chat members. Always true for supergroups,
     * channels and secret chats.
     */
    suspend fun Chat.deleteMessages(messageIds: LongArray?, revoke: Boolean) =
        api.deleteMessages(this.id, messageIds, revoke)

    /**
     * Suspend function, which deletes revoked chat invite links. Requires administrator privileges
     * and canInviteUsers right in the chat for own links and owner privileges for other links.
     *
     * @param inviteLink Invite link to revoke.
     */
    suspend fun Chat.deleteRevokedInviteLink(inviteLink: String?) =
        api.deleteRevokedChatInviteLink(this.id, inviteLink)

    /**
     * Suspend function, which edits a non-primary invite link for a chat. Available for basic groups,
     * supergroups, and channels. Requires administrator privileges and canInviteUsers right in the chat
     * for own links and owner privileges for other links.
     *
     * @param inviteLink Invite link to be edited.
     * @param name Invite link name; 0-32 characters.
     * @param expirationDate Point in time (Unix timestamp) when the link will expire; pass 0 if
     * never.
     * @param memberLimit The maximum number of chat members that can join the chat via the link
     * simultaneously; 0-99999; pass 0 if not limited.
     * @param createsJoinRequest True, if the link only creates join request. If true, memberLimit
     * must not be specified.
     *
     * @return [TdApi.ChatInviteLink] Contains a chat invite link.
     */
    suspend fun Chat.editInviteLink(
        inviteLink: String?,
        name: String?,
        expirationDate: Int,
        memberLimit: Int,
        createsJoinRequest: Boolean,
    ) = api.editChatInviteLink(
        this.id, inviteLink, name, expirationDate, memberLimit,
        createsJoinRequest
    )

    /**
     * Suspend function, which edits the message content caption. Returns the edited message after the
     * edit is completed on the server side.
     *
     * @param messageId Identifier of the message.
     * @param replyMarkup The new message reply markup; pass null if none; for bots only.
     * @param caption New message content caption; 0-GetOption(&quot;message_caption_length_max&quot;)
     * characters; pass null to remove caption.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.editMessageCaption(
        messageId: Long,
        replyMarkup: ReplyMarkup?,
        caption: FormattedText?,
    ) = api.editMessageCaption(this.id, messageId, replyMarkup, caption)

    /**
     * Suspend function, which edits the message content of a live location. Messages can be edited
     * for a limited period of time specified in the live location. Returns the edited message after the
     * edit is completed on the server side.
     *
     * @param messageId Identifier of the message.
     * @param replyMarkup The new message reply markup; pass null if none; for bots only.
     * @param location New location content of the message; pass null to stop sharing the live
     * location.
     * @param heading The new direction in which the location moves, in degrees; 1-360. Pass 0 if
     * unknown.
     * @param proximityAlertRadius The new maximum distance for proximity alerts, in meters
     * (0-100000). Pass 0 if the notification is disabled.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.editMessageLiveLocation(
        messageId: Long,
        replyMarkup: ReplyMarkup?,
        location: Location?,
        heading: Int,
        proximityAlertRadius: Int,
    ) = api.editMessageLiveLocation(
        this.id, messageId, replyMarkup, location, heading,
        proximityAlertRadius
    )

    /**
     * Suspend function, which edits the content of a message with an animation, an audio, a document,
     * a photo or a video, including message caption. If only the caption needs to be edited, use
     * editMessageCaption instead. The media can't be edited if the message was set to self-destruct or
     * to a self-destructing media. The type of message content in an album can't be changed with
     * exception of replacing a photo with a video or vice versa. Returns the edited message after the
     * edit is completed on the server side.
     *
     * @param messageId Identifier of the message.
     * @param replyMarkup The new message reply markup; pass null if none; for bots only.
     * @param inputMessageContent New content of the message. Must be one of the following types:
     * inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or
     * inputMessageVideo.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.editMessageMedia(
        messageId: Long,
        replyMarkup: ReplyMarkup?,
        inputMessageContent: InputMessageContent?,
    ) = api.editMessageMedia(this.id, messageId, replyMarkup, inputMessageContent)

    /**
     * Suspend function, which edits the message reply markup; for bots only. Returns the edited
     * message after the edit is completed on the server side.
     *
     * @param messageId Identifier of the message.
     * @param replyMarkup The new message reply markup; pass null if none.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.editMessageReplyMarkup(messageId: Long, replyMarkup: ReplyMarkup?) =
        api.editMessageReplyMarkup(this.id, messageId, replyMarkup)

    /**
     * Suspend function, which edits the time when a scheduled message will be sent. Scheduling state
     * of all messages in the same album or forwarded together with the message will be also changed.
     *
     * @param messageId Identifier of the message.
     * @param schedulingState The new message scheduling state; pass null to send the message
     * immediately.
     */
    suspend fun Chat.editMessageSchedulingState(
        messageId: Long,
        schedulingState: MessageSchedulingState?,
    ) = api.editMessageSchedulingState(
        this.id, messageId,
        schedulingState
    )

    /**
     * Suspend function, which edits the text of a message (or a text of a game message). Returns the
     * edited message after the edit is completed on the server side.
     *
     * @param messageId Identifier of the message.
     * @param replyMarkup The new message reply markup; pass null if none; for bots only.
     * @param inputMessageContent New text content of the message. Must be of type inputMessageText.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.editMessageText(
        messageId: Long,
        replyMarkup: ReplyMarkup?,
        inputMessageContent: InputMessageContent?,
    ) = api.editMessageText(this.id, messageId, replyMarkup, inputMessageContent)

    /**
     * Suspend function, which forwards previously sent messages. Returns the forwarded messages in
     * the same order as the message identifiers passed in messageIds. If a message can't be forwarded,
     * null will be returned instead of the message.
     *
     * @param fromChatId Identifier of the chat from which to forward messages.
     * @param messageIds Identifiers of the messages to forward. Message identifiers must be in a
     * strictly increasing order. At most 100 messages can be forwarded simultaneously.
     * @param options Options to be used to send the messages; pass null to use default options.
     * @param sendCopy If true, content of the messages will be copied without reference to the
     * original sender. Always true if the messages are forwarded to a secret chat or are local.
     * @param removeCaption If true, media caption of message copies will be removed. Ignored if
     * sendCopy is false.
     * @param onlyPreview If true, messages will not be forwarded and instead fake messages will be
     * returned.
     *
     * @return [TdApi.Messages] Contains a list of messages.
     */
    suspend fun Chat.forwardMessages(
        fromChatId: Long,
        messageIds: LongArray?,
        options: MessageSendOptions?,
        sendCopy: Boolean,
        removeCaption: Boolean,
        onlyPreview: Boolean,
    ) = api.forwardMessages(
        this.id, fromChatId, messageIds, options, sendCopy, removeCaption,
        onlyPreview
    )

    /**
     * Suspend function, which sends a callback query to a bot and returns an answer. Returns an error
     * with code 502 if the bot fails to answer the query before the query timeout expires.
     *
     * @param messageId Identifier of the message from which the query originated.
     * @param payload Query payload.
     *
     * @return [TdApi.CallbackQueryAnswer] Contains a bot's answer to a callback query.
     */
    suspend fun Chat.getCallbackQueryAnswer(messageId: Long, payload: CallbackQueryPayload?) =
        api.getCallbackQueryAnswer(this.id, messageId, payload)

    /**
     * Suspend function, which returns information about a message with the callback button that
     * originated a callback query; for bots only.
     *
     * @param messageId Message identifier.
     * @param callbackQueryId Identifier of the callback query.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.getCallbackQueryMessage(messageId: Long, callbackQueryId: Long) =
        api.getCallbackQueryMessage(this.id, messageId, callbackQueryId)

    /**
     * Suspend function, which returns information about a chat by its identifier, this is an offline
     * request if the current user is not a bot.
     *
     *
     * @return [TdApi.Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
     */
    suspend fun Chat.get() = api.getChat(this.id)

    /**
     * Suspend function, which returns a list of administrators of the chat with their custom titles.
     *
     *
     * @return [TdApi.ChatAdministrators] Represents a list of chat administrators.
     */
    suspend fun Chat.getAdministrators() = api.getChatAdministrators(this.id)

    /**
     * Suspend function, which returns list of message sender identifiers, which can be used to send
     * messages in a chat.
     *
     *
     * @return [TdApi.MessageSenders] Represents a list of message senders.
     */
    suspend fun Chat.getAvailableMessageSenders() = api.getChatAvailableMessageSenders(this.id)

    /**
     * Suspend function, which returns a list of service actions taken by chat members and
     * administrators in the last 48 hours. Available only for supergroups and channels. Requires
     * administrator rights. Returns results in reverse chronological order (i. e., in order of
     * decreasing eventId).
     *
     * @param query Search query by which to filter events.
     * @param fromEventId Identifier of an event from which to return results. Use 0 to get results
     * from the latest events.
     * @param limit The maximum number of events to return; up to 100.
     * @param filters The types of events to return; pass null to get chat events of all types.
     * @param userIds User identifiers by which to filter events. By default, events relating to all
     * users will be returned.
     *
     * @return [TdApi.ChatEvents] Contains a list of chat events.
     */
    suspend fun Chat.getEventLog(
        query: String?,
        fromEventId: Long,
        limit: Int,
        filters: ChatEventLogFilters?,
        userIds: LongArray?,
    ) = api.getChatEventLog(this.id, query, fromEventId, limit, filters, userIds)

    /**
     * Suspend function, which returns messages in a chat. The messages are returned in a reverse
     * chronological order (i.e., in order of decreasing messageId). For optimal performance, the number
     * of returned messages is chosen by TDLib. This is an offline request if onlyLocal is true.
     *
     * @param fromMessageId Identifier of the message starting from which history must be fetched; use
     * 0 to get results from the last message.
     * @param offset Specify 0 to get results from exactly the fromMessageId or a negative offset up
     * to 99 to get additionally some newer messages.
     * @param limit The maximum number of messages to be returned; must be positive and can't be
     * greater than 100. If the offset is negative, the limit must be greater than or equal to -offset.
     * For optimal performance, the number of returned messages is chosen by TDLib and can be smaller
     * than the specified limit.
     * @param onlyLocal If true, returns only messages that are available locally without sending
     * network requests.
     *
     * @return [TdApi.Messages] Contains a list of messages.
     */
    suspend fun Chat.getHistory(
        fromMessageId: Long,
        offset: Int,
        limit: Int,
        onlyLocal: Boolean,
    ) = api.getChatHistory(this.id, fromMessageId, offset, limit, onlyLocal)

    /**
     * Suspend function, which returns information about an invite link. Requires administrator
     * privileges and canInviteUsers right in the chat to get own links and owner privileges to get other
     * links.
     *
     * @param inviteLink Invite link to get.
     *
     * @return [TdApi.ChatInviteLink] Contains a chat invite link.
     */
    suspend fun Chat.getInviteLink(inviteLink: String?) = api.getChatInviteLink(this.id, inviteLink)

    /**
     * Suspend function, which returns list of chat administrators with number of their invite links.
     * Requires owner privileges in the chat.
     *
     *
     * @return [TdApi.ChatInviteLinkCounts] Contains a list of chat invite link counts.
     */
    suspend fun Chat.getInviteLinkCounts() = api.getChatInviteLinkCounts(this.id)

    /**
     * Suspend function, which returns chat members joined a chat via an invite link. Requires
     * administrator privileges and canInviteUsers right in the chat for own links and owner privileges
     * for other links.
     *
     * @param inviteLink Invite link for which to return chat members.
     * @param offsetMember A chat member from which to return next chat members; pass null to get
     * results from the beginning.
     * @param limit The maximum number of chat members to return; up to 100.
     *
     * @return [TdApi.ChatInviteLinkMembers] Contains a list of chat members joined a chat via an
     * invite link.
     */
    suspend fun Chat.getInviteLinkMembers(
        inviteLink: String?,
        offsetMember: ChatInviteLinkMember?,
        limit: Int,
    ) = api.getChatInviteLinkMembers(this.id, inviteLink, offsetMember, limit)

    /**
     * Suspend function, which returns invite links for a chat created by specified administrator.
     * Requires administrator privileges and canInviteUsers right in the chat to get own links and owner
     * privileges to get other links.
     *
     * @param creatorUserId User identifier of a chat administrator. Must be an identifier of the
     * current user for non-owner.
     * @param isRevoked Pass true if revoked links needs to be returned instead of active or expired.
     *
     * @param offsetDate Creation date of an invite link starting after which to return invite links;
     * use 0 to get results from the beginning.
     * @param offsetInviteLink Invite link starting after which to return invite links; use empty
     * string to get results from the beginning.
     * @param limit The maximum number of invite links to return; up to 100.
     *
     * @return [TdApi.ChatInviteLinks] Contains a list of chat invite links.
     */
    suspend fun Chat.getInviteLinks(
        creatorUserId: Long,
        isRevoked: Boolean,
        offsetDate: Int,
        offsetInviteLink: String?,
        limit: Int,
    ) = api.getChatInviteLinks(this.id, creatorUserId, isRevoked, offsetDate, offsetInviteLink, limit)

    /**
     * Suspend function, which returns pending join requests in a chat.
     *
     * @param inviteLink Invite link for which to return join requests. If empty, all join requests
     * will be returned. Requires administrator privileges and canInviteUsers right in the chat for own
     * links and owner privileges for other links.
     * @param query A query to search for in the first names, last names and usernames of the users to
     * return.
     * @param offsetRequest A chat join request from which to return next requests; pass null to get
     * results from the beginning.
     * @param limit The maximum number of requests to join the chat to return.
     *
     * @return [TdApi.ChatJoinRequests] Contains a list of requests to join a chat.
     */
    suspend fun Chat.getJoinRequests(
        inviteLink: String?,
        query: String?,
        offsetRequest: ChatJoinRequest?,
        limit: Int,
    ) = api.getChatJoinRequests(this.id, inviteLink, query, offsetRequest, limit)

    /**
     * Suspend function, which returns chat lists to which the chat can be added. This is an offline
     * request.
     *
     *
     * @return [TdApi.ChatLists] Contains a list of chat lists.
     */
    suspend fun Chat.getListsToAdd() = api.getChatListsToAddChat(this.id)

    /**
     * Suspend function, which returns information about a single member of a chat.
     *
     * @param memberId Member identifier.
     *
     * @return [TdApi.ChatMember] Describes a user or a chat as a member of another chat.
     */
    suspend fun Chat.getMember(memberId: MessageSender?) = api.getChatMember(this.id, memberId)

    /**
     * Suspend function, which returns the last message sent in a chat no later than the specified
     * date.
     *
     * @param date Point in time (Unix timestamp) relative to which to search for messages.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.getMessageByDate(date: Int) = api.getChatMessageByDate(this.id, date)

    /**
     * Suspend function, which returns information about the next messages of the specified type in
     * the chat split by days. Returns the results in reverse chronological order. Can return partial
     * result for the last returned day. Behavior of this method depends on the value of the option
     * &quot;utc_time_offset&quot;.
     *
     * @param filter Filter for message content. Filters searchMessagesFilterEmpty,
     * searchMessagesFilterMention and searchMessagesFilterUnreadMention are unsupported in this
     * function.
     * @param fromMessageId The message identifier from which to return information about messages;
     * use 0 to get results from the last message.
     *
     * @return [TdApi.MessageCalendar] Contains information about found messages, split by days
     * according to the option &quot;utc_time_offset&quot;.
     */
    suspend fun Chat.getMessageCalendar(filter: SearchMessagesFilter?, fromMessageId: Long) =
        api.getChatMessageCalendar(this.id, filter, fromMessageId)

    /**
     * Suspend function, which returns approximate number of messages of the specified type in the
     * chat.
     *
     * @param filter Filter for message content; searchMessagesFilterEmpty is unsupported in this
     * function.
     * @param returnLocal If true, returns count that is available locally without sending network
     * requests, returning -1 if the number of messages is unknown.
     *
     * @return [TdApi.Count] Contains a counter.
     */
    suspend fun Chat.getMessageCount(filter: SearchMessagesFilter?, returnLocal: Boolean) =
        api.getChatMessageCount(this.id, filter, returnLocal)

    /**
     * Suspend function, which returns information about a newest pinned message in the chat.
     *
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.getPinnedMessage() = api.getChatPinnedMessage(this.id)

    /**
     * Suspend function, which returns all scheduled messages in a chat. The messages are returned in
     * a reverse chronological order (i.e., in order of decreasing messageId).
     *
     *
     * @return [TdApi.Messages] Contains a list of messages.
     */
    suspend fun Chat.getScheduledMessages() = api.getChatScheduledMessages(this.id)

    /**
     * Suspend function, which returns sparse positions of messages of the specified type in the chat
     * to be used for shared media scroll implementation. Returns the results in reverse chronological
     * order (i.e., in order of decreasing messageId). Cannot be used in secret chats or with
     * searchMessagesFilterFailedToSend filter without an enabled message database.
     *
     * @param filter Filter for message content. Filters searchMessagesFilterEmpty,
     * searchMessagesFilterMention and searchMessagesFilterUnreadMention are unsupported in this
     * function.
     * @param fromMessageId The message identifier from which to return information about message
     * positions.
     * @param limit The expected number of message positions to be returned; 50-2000. A smaller number
     * of positions can be returned, if there are not enough appropriate messages.
     *
     * @return [TdApi.MessagePositions] Contains a list of message positions.
     */
    suspend fun Chat.getSparseMessagePositions(
        filter: SearchMessagesFilter?,
        fromMessageId: Long,
        limit: Int,
    ) = api.getChatSparseMessagePositions(this.id, filter, fromMessageId, limit)

    /**
     * Suspend function, which returns sponsored message to be shown in a chat; for channel chats
     * only. Returns a 404 error if there is no sponsored message in the chat.
     *
     *
     * @return [TdApi.SponsoredMessage] Describes a sponsored message.
     */
    suspend fun Chat.getSponsoredMessage() = api.getChatSponsoredMessage(this.id)

    /**
     * Suspend function, which returns detailed statistics about a chat. Currently, this method can be
     * used only for supergroups and channels. Can be used only if supergroupFullInfo.canGetStatistics ==
     * true.
     *
     * @param isDark Pass true if a dark theme is used by the application.
     *
     * @return [TdApi.ChatStatistics] This class is an abstract base class.
     */
    suspend fun Chat.getStatistics(isDark: Boolean) = api.getChatStatistics(this.id, isDark)

    /**
     * Suspend function, which returns the high scores for a game and some part of the high score
     * table in the range of the specified user; for bots only.
     *
     * @param messageId Identifier of the message.
     * @param userId User identifier.
     *
     * @return [TdApi.GameHighScores] Contains a list of game high scores.
     */
    suspend fun Chat.getGameHighScores(messageId: Long, userId: Long) = api.getGameHighScores(
        this.id,
        messageId, userId
    )

    /**
     * Suspend function, which sends an inline query to a bot and returns its results. Returns an
     * error with code 502 if the bot fails to answer the query before the query timeout expires.
     *
     * @param botUserId The identifier of the target bot.
     * @param userLocation Location of the user; pass null if unknown or the bot doesn't need user's
     * location.
     * @param query Text of the query.
     * @param offset Offset of the first entry to return.
     *
     * @return [TdApi.InlineQueryResults] Represents the results of the inline query. Use
     * sendInlineQueryResultMessage to send the result of the query.
     */
    suspend fun Chat.getInlineQueryResults(
        botUserId: Long,
        userLocation: Location?,
        query: String?,
        offset: String?,
    ) = api.getInlineQueryResults(botUserId, this.id, userLocation, query, offset)

    /**
     * Suspend function, which returns an HTTP URL which can be used to automatically authorize the
     * user on a website after clicking an inline button of type inlineKeyboardButtonTypeLoginUrl. Use
     * the method getLoginUrlInfo to find whether a prior user confirmation is needed. If an error is
     * returned, then the button must be handled as an ordinary URL button.
     *
     * @param messageId Message identifier of the message with the button.
     * @param buttonId Button identifier.
     * @param allowWriteAccess True, if the user allowed the bot to send them messages.
     *
     * @return [TdApi.HttpUrl] Contains an HTTP URL.
     */
    suspend fun Chat.getLoginUrl(
        messageId: Long,
        buttonId: Long,
        allowWriteAccess: Boolean,
    ) = api.getLoginUrl(this.id, messageId, buttonId, allowWriteAccess)

    /**
     * Suspend function, which returns information about a button of type
     * inlineKeyboardButtonTypeLoginUrl. The method needs to be called when the user presses the button.
     *
     * @param messageId Message identifier of the message with the button.
     * @param buttonId Button identifier.
     *
     * @return [TdApi.LoginUrlInfo] This class is an abstract base class.
     */
    suspend fun Chat.getLoginUrlInfo(messageId: Long, buttonId: Long) = api.getLoginUrlInfo(
        this.id,
        messageId, buttonId
    )

    /**
     * Suspend function, which returns information about a file with a map thumbnail in PNG format.
     * Only map thumbnail files with size less than 1MB can be downloaded.
     *
     * @param location Location of the map center.
     * @param zoom Map zoom level; 13-20.
     * @param width Map width in pixels before applying scale; 16-1024.
     * @param height Map height in pixels before applying scale; 16-1024.
     * @param scale Map scale; 1-3.
     *
     * @return [TdApi.File] Represents a file.
     */
    suspend fun Chat.getMapThumbnailFile(
        location: Location?,
        zoom: Int,
        width: Int,
        height: Int,
        scale: Int,
    ) = api.getMapThumbnailFile(location, zoom, width, height, scale, this.id)

    /**
     * Suspend function, which returns information about a message.
     *
     * @param messageId Identifier of the message to get.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.getMessage(messageId: Long) = api.getMessage(this.id, messageId)

    /**
     * Suspend function, which returns an HTML code for embedding the message. Available only for
     * messages in supergroups and channels with a username.
     *
     * @param messageId Identifier of the message.
     * @param forAlbum Pass true to return an HTML code for embedding of the whole media album.
     *
     * @return [TdApi.Text] Contains some text.
     */
    suspend fun Chat.getMessageEmbeddingCode(messageId: Long, forAlbum: Boolean) =
        api.getMessageEmbeddingCode(this.id, messageId, forAlbum)

    /**
     * Suspend function, which returns a confirmation text to be shown to the user before starting
     * message import.
     *
     *
     * @return [TdApi.Text] Contains some text.
     */
    suspend fun Chat.getMessageImportConfirmationText() =
        api.getMessageImportConfirmationText(this.id)

    /**
     * Suspend function, which returns an HTTPS link to a message in a chat. Available only for
     * already sent messages in supergroups and channels, or if message.canGetMediaTimestampLinks and a
     * media timestamp link is generated. This is an offline request.
     *
     * @param messageId Identifier of the message.
     * @param mediaTimestamp If not 0, timestamp from which the video/audio/video note/voice note
     * playing must start, in seconds. The media can be in the message content or in its web page
     * preview.
     * @param forAlbum Pass true to create a link for the whole media album.
     * @param forComment Pass true to create a link to the message as a channel post comment, or from
     * a message thread.
     *
     * @return [TdApi.MessageLink] Contains an HTTPS link to a message in a supergroup or channel.
     */
    suspend fun Chat.getMessageLink(
        messageId: Long,
        mediaTimestamp: Int,
        forAlbum: Boolean,
        forComment: Boolean,
    ) = api.getMessageLink(this.id, messageId, mediaTimestamp, forAlbum, forComment)

    /**
     * Suspend function, which returns information about a message, if it is available locally without
     * sending network request. This is an offline request.
     *
     * @param messageId Identifier of the message to get.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.getMessageLocally(messageId: Long) = api.getMessageLocally(this.id, messageId)

    /**
     * Suspend function, which returns forwarded copies of a channel message to different public
     * channels. For optimal performance, the number of returned messages is chosen by TDLib.
     *
     * @param messageId Message identifier.
     * @param offset Offset of the first entry to return as received from the previous request; use
     * empty string to get first chunk of results.
     * @param limit The maximum number of messages to be returned; must be positive and can't be
     * greater than 100. For optimal performance, the number of returned messages is chosen by TDLib and
     * can be smaller than the specified limit.
     *
     * @return [TdApi.FoundMessages] Contains a list of messages found by a search.
     */
    suspend fun Chat.getMessagePublicForwards(
        messageId: Long,
        offset: String?,
        limit: Int,
    ) = api.getMessagePublicForwards(this.id, messageId, offset, limit)

    /**
     * Suspend function, which returns detailed statistics about a message. Can be used only if
     * message.canGetStatistics == true.
     *
     * @param messageId Message identifier.
     * @param isDark Pass true if a dark theme is used by the application.
     *
     * @return [TdApi.MessageStatistics] A detailed statistics about a message.
     */
    suspend fun Chat.getMessageStatistics(messageId: Long, isDark: Boolean) =
        api.getMessageStatistics(this.id, messageId, isDark)

    /**
     * Suspend function, which returns information about a message thread. Can be used only if
     * message.canGetMessageThread == true.
     *
     * @param messageId Identifier of the message.
     *
     * @return [TdApi.MessageThreadInfo] Contains information about a message thread.
     */
    suspend fun Chat.getMessageThread(messageId: Long) = api.getMessageThread(this.id, messageId)

    /**
     * Suspend function, which returns messages in a message thread of a message. Can be used only if
     * message.canGetMessageThread == true. Message thread of a channel message is in the channel's
     * linked supergroup. The messages are returned in a reverse chronological order (i.e., in order of
     * decreasing messageId). For optimal performance, the number of returned messages is chosen by
     * TDLib.
     *
     * @param messageId Message identifier, which thread history needs to be returned.
     * @param fromMessageId Identifier of the message starting from which history must be fetched; use
     * 0 to get results from the last message.
     * @param offset Specify 0 to get results from exactly the fromMessageId or a negative offset up
     * to 99 to get additionally some newer messages.
     * @param limit The maximum number of messages to be returned; must be positive and can't be
     * greater than 100. If the offset is negative, the limit must be greater than or equal to -offset.
     * For optimal performance, the number of returned messages is chosen by TDLib and can be smaller
     * than the specified limit.
     *
     * @return [TdApi.Messages] Contains a list of messages.
     */
    suspend fun Chat.getMessageThreadHistory(
        messageId: Long,
        fromMessageId: Long,
        offset: Int,
        limit: Int,
    ) = api.getMessageThreadHistory(this.id, messageId, fromMessageId, offset, limit)

    /**
     * Suspend function, which returns viewers of a recent outgoing message in a basic group or a
     * supergroup chat. For video notes and voice notes only users, opened content of the message, are
     * returned. The method can be called if message.canGetViewers == true.
     *
     * @param messageId Identifier of the message.
     *
     * @return [TdApi.Users] Represents a list of users.
     */
    suspend fun Chat.getMessageViewers(messageId: Long) = api.getMessageViewers(this.id, messageId)

    /**
     * Suspend function, which returns information about messages. If a message is not found, returns
     * null on the corresponding position of the result.
     *
     * @param messageIds Identifiers of the messages to get.
     *
     * @return [TdApi.Messages] Contains a list of messages.
     */
    suspend fun Chat.getMessages(messageIds: LongArray?) = api.getMessages(this.id, messageIds)

    /**
     * Suspend function, which returns an invoice payment form. This method must be called when the
     * user presses inlineKeyboardButtonBuy.
     *
     * @param messageId Message identifier.
     * @param theme Preferred payment form theme; pass null to use the default theme.
     *
     * @return [TdApi.PaymentForm] Contains information about an invoice payment form.
     */
    suspend fun Chat.getPaymentForm(messageId: Long, theme: PaymentFormTheme?) =
        api.getPaymentForm(this.id, messageId, theme)

    /**
     * Suspend function, which returns information about a successful payment.
     *
     * @param messageId Message identifier.
     *
     * @return [TdApi.PaymentReceipt] Contains information about a successful payment.
     */
    suspend fun Chat.getPaymentReceipt(messageId: Long) = api.getPaymentReceipt(this.id, messageId)

    /**
     * Suspend function, which returns users voted for the specified option in a non-anonymous polls.
     * For optimal performance, the number of returned users is chosen by TDLib.
     *
     * @param messageId Identifier of the message containing the poll.
     * @param optionId 0-based identifier of the answer option.
     * @param offset Number of users to skip in the result; must be non-negative.
     * @param limit The maximum number of users to be returned; must be positive and can't be greater
     * than 50. For optimal performance, the number of returned users is chosen by TDLib and can be
     * smaller than the specified limit, even if the end of the voter list has not been reached.
     *
     * @return [TdApi.Users] Represents a list of users.
     */
    suspend fun Chat.getPollVoters(
        messageId: Long,
        optionId: Int,
        offset: Int,
        limit: Int,
    ) = api.getPollVoters(this.id, messageId, optionId, offset, limit)

    /**
     * Suspend function, which returns information about a message that is replied by a given message.
     * Also returns the pinned message, the game message, and the invoice message for messages of the
     * types messagePinMessage, messageGameScore, and messagePaymentSuccessful respectively.
     *
     * @param messageId Identifier of the reply message.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.getRepliedMessage(messageId: Long) = api.getRepliedMessage(this.id, messageId)

    /**
     * Suspend function, which loads an asynchronous or a zoomed in statistical graph.
     *
     * @param token The token for graph loading.
     * @param x X-value for zoomed in graph or 0 otherwise.
     *
     * @return [TdApi.StatisticalGraph] This class is an abstract base class.
     */
    suspend fun Chat.getStatisticalGraph(token: String?, x: Long) = api.getStatisticalGraph(
        this.id,
        token, x
    )

    /**
     * Suspend function, which returns list of participant identifiers, on whose behalf a video chat
     * in the chat can be joined.
     *
     *
     * @return [TdApi.MessageSenders] Represents a list of message senders.
     */
    suspend fun Chat.getVideoAvailableParticipants() = api.getVideoChatAvailableParticipants(this.id)

    /**
     * Suspend function, which imports messages exported from another app.
     *
     * @param messageFile File with messages to import. Only inputFileLocal and inputFileGenerated are
     * supported. The file must not be previously uploaded.
     * @param attachedFiles Files used in the imported messages. Only inputFileLocal and
     * inputFileGenerated are supported. The files must not be previously uploaded.
     */
    suspend fun Chat.importMessages(messageFile: InputFile?, attachedFiles: Array<InputFile>?) =
        api.importMessages(this.id, messageFile, attachedFiles)

    /**
     * Suspend function, which adds the current user as a new member to a chat. Private and secret
     * chats can't be joined using this method.
     */
    suspend fun Chat.join() = api.joinChat(this.id)

    /**
     * Suspend function, which removes the current user from chat members. Private and secret chats
     * can't be left using this method.
     */
    suspend fun Chat.leave() = api.leaveChat(this.id)

    /**
     * Suspend function, which informs TDLib that the chat is opened by the user. Many useful
     * activities depend on the chat being opened or closed (e.g., in supergroups and channels all
     * updates are received only for opened chats).
     */
    suspend fun Chat.open() = api.openChat(this.id)

    /**
     * Suspend function, which informs TDLib that the message content has been opened (e.g., the user
     * has opened a photo, video, document, location or venue, or has listened to an audio file or voice
     * note message). An updateMessageContentOpened update will be generated if something has changed.
     *
     * @param messageId Identifier of the message with the opened content.
     */
    suspend fun Chat.openMessageContent(messageId: Long) = api.openMessageContent(this.id, messageId)

    /**
     * Suspend function, which pins a message in a chat; requires canPinMessages rights or
     * canEditMessages rights in the channel.
     *
     * @param messageId Identifier of the new pinned message.
     * @param disableNotification True, if there must be no notification about the pinned message.
     * Notifications are always disabled in channels and private chats.
     * @param onlyForSelf True, if the message needs to be pinned for one side only; private chats
     * only.
     */
    suspend fun Chat.pinMessage(
        messageId: Long,
        disableNotification: Boolean,
        onlyForSelf: Boolean,
    ) = api.pinChatMessage(this.id, messageId, disableNotification, onlyForSelf)

    /**
     * Suspend function, which handles a pending join request in a chat.
     *
     * @param userId Identifier of the user that sent the request.
     * @param approve True, if the request is approved. Otherwise the request is declived.
     */
    suspend fun Chat.processJoinRequest(userId: Long, approve: Boolean) =
        api.processChatJoinRequest(this.id, userId, approve)

    /**
     * Suspend function, which handles all pending join requests for a given link in a chat.
     *
     * @param inviteLink Invite link for which to process join requests. If empty, all join requests
     * will be processed. Requires administrator privileges and canInviteUsers right in the chat for own
     * links and owner privileges for other links.
     * @param approve True, if the requests are approved. Otherwise the requests are declived.
     */
    suspend fun Chat.processJoinRequests(inviteLink: String?, approve: Boolean) =
        api.processChatJoinRequests(this.id, inviteLink, approve)

    /**
     * Suspend function, which marks all mentions in a chat as read.
     */
    suspend fun Chat.readAllMentions() = api.readAllChatMentions(this.id)

    /**
     * Suspend function, which removes a chat action bar without any other action.
     */
    suspend fun Chat.removeActionBar() = api.removeChatActionBar(this.id)

    /**
     * Suspend function, which removes a chat from the list of recently found chats.
     */
    suspend fun Chat.removeRecentlyFound() = api.removeRecentlyFoundChat(this.id)

    /**
     * Suspend function, which removes a chat from the list of frequently used chats. Supported only
     * if the chat info database is enabled.
     *
     * @param category Category of frequently used chats.
     */
    suspend fun Chat.removeTop(category: TopChatCategory?) = api.removeTopChat(category, this.id)

    /**
     * Suspend function, which replaces current primary invite link for a chat with a new primary
     * invite link. Available for basic groups, supergroups, and channels. Requires administrator
     * privileges and canInviteUsers right.
     *
     *
     * @return [TdApi.ChatInviteLink] Contains a chat invite link.
     */
    suspend fun Chat.replacePrimaryInviteLink() = api.replacePrimaryChatInviteLink(this.id)

    /**
     * Suspend function, which reports a chat to the Telegram moderators. A chat can be reported only
     * from the chat action bar, or if chat.canBeReported.
     *
     * @param messageIds Identifiers of reported messages, if any.
     * @param reason The reason for reporting the chat.
     * @param text Additional report details; 0-1024 characters.
     */
    suspend fun Chat.report(
        messageIds: LongArray?,
        reason: ChatReportReason?,
        text: String?,
    ) = api.reportChat(this.id, messageIds, reason, text)

    /**
     * Suspend function, which reports a chat photo to the Telegram moderators. A chat photo can be
     * reported only if chat.canBeReported.
     *
     * @param fileId Identifier of the photo to report. Only full photos from chatPhoto can be
     * reported.
     * @param reason The reason for reporting the chat photo.
     * @param text Additional report details; 0-1024 characters.
     */
    suspend fun Chat.reportPhoto(
        fileId: Int,
        reason: ChatReportReason?,
        text: String?,
    ) = api.reportChatPhoto(this.id, fileId, reason, text)

    /**
     * Suspend function, which resends messages which failed to send. Can be called only for messages
     * for which messageSendingStateFailed.canRetry is true and after specified in
     * messageSendingStateFailed.retryAfter time passed. If a message is re-sent, the corresponding
     * failed to send message is deleted. Returns the sent messages in the same order as the message
     * identifiers passed in messageIds. If a message can't be re-sent, null will be returned instead of
     * the message.
     *
     * @param messageIds Identifiers of the messages to resend. Message identifiers must be in a
     * strictly increasing order.
     *
     * @return [TdApi.Messages] Contains a list of messages.
     */
    suspend fun Chat.resendMessages(messageIds: LongArray?) = api.resendMessages(this.id, messageIds)

    /**
     * Suspend function, which revokes invite link for a chat. Available for basic groups,
     * supergroups, and channels. Requires administrator privileges and canInviteUsers right in the chat
     * for own links and owner privileges for other links. If a primary link is revoked, then
     * additionally to the revoked link returns new primary link.
     *
     * @param inviteLink Invite link to be revoked.
     *
     * @return [TdApi.ChatInviteLinks] Contains a list of chat invite links.
     */
    suspend fun Chat.revokeInviteLink(inviteLink: String?) = api.revokeChatInviteLink(
        this.id,
        inviteLink
    )

    /**
     * Suspend function, which saves application log event on the server. Can be called before
     * authorization.
     *
     * @param type Event type.
     * @param data The log event data.
     */
    suspend fun Chat.saveApplicationLogEvent(type: String?, data: JsonValue?) =
        api.saveApplicationLogEvent(type, this.id, data)

    /**
     * Suspend function, which searches for a specified query in the first name, last name and
     * username of the members of a specified chat. Requires administrator rights in channels.
     *
     * @param query Query to search for.
     * @param limit The maximum number of users to be returned; up to 200.
     * @param filter The type of users to search for; pass null to search among all chat members.
     *
     * @return [TdApi.ChatMembers] Contains a list of chat members.
     */
    suspend fun Chat.searchMembers(
        query: String?,
        limit: Int,
        filter: ChatMembersFilter?,
    ) = api.searchChatMembers(this.id, query, limit, filter)

    /**
     * Suspend function, which searches for messages with given words in the chat. Returns the results
     * in reverse chronological order, i.e. in order of decreasing messageId. Cannot be used in secret
     * chats with a non-empty query (searchSecretMessages must be used instead), or without an enabled
     * message database. For optimal performance, the number of returned messages is chosen by TDLib and
     * can be smaller than the specified limit.
     *
     * @param query Query to search for.
     * @param senderId Identifier of the sender of messages to search for; pass null to search for
     * messages from any sender. Not supported in secret chats.
     * @param fromMessageId Identifier of the message starting from which history must be fetched; use
     * 0 to get results from the last message.
     * @param offset Specify 0 to get results from exactly the fromMessageId or a negative offset to
     * get the specified message and some newer messages.
     * @param limit The maximum number of messages to be returned; must be positive and can't be
     * greater than 100. If the offset is negative, the limit must be greater than -offset. For optimal
     * performance, the number of returned messages is chosen by TDLib and can be smaller than the
     * specified limit.
     * @param filter Additional filter for messages to search; pass null to search for all messages.
     * @param messageThreadId If not 0, only messages in the specified thread will be returned;
     * supergroups only.
     *
     * @return [TdApi.Messages] Contains a list of messages.
     */
    suspend fun Chat.searchMessages(
        query: String?,
        senderId: MessageSender?,
        fromMessageId: Long,
        offset: Int,
        limit: Int,
        filter: SearchMessagesFilter?,
        messageThreadId: Long,
    ) = api.searchChatMessages(
        this.id, query, senderId, fromMessageId, offset, limit, filter,
        messageThreadId
    )

    /**
     * Suspend function, which returns information about the recent locations of chat members that
     * were sent to the chat. Returns up to 1 location message per user.
     *
     * @param limit The maximum number of messages to be returned.
     *
     * @return [TdApi.Messages] Contains a list of messages.
     */
    suspend fun Chat.searchRecentLocationMessages(limit: Int) =
        api.searchChatRecentLocationMessages(this.id, limit)

    /**
     * Suspend function, which searches for messages in secret chats. Returns the results in reverse
     * chronological order. For optimal performance, the number of returned messages is chosen by TDLib.
     *
     * @param query Query to search for. If empty, searchChatMessages must be used instead.
     * @param offset Offset of the first entry to return as received from the previous request; use
     * empty string to get first chunk of results.
     * @param limit The maximum number of messages to be returned; up to 100. For optimal performance,
     * the number of returned messages is chosen by TDLib and can be smaller than the specified limit.
     * @param filter Additional filter for messages to search; pass null to search for all messages.
     *
     * @return [TdApi.FoundMessages] Contains a list of messages found by a search.
     */
    suspend fun Chat.searchSecretMessages(
        query: String?,
        offset: String?,
        limit: Int,
        filter: SearchMessagesFilter?,
    ) = api.searchSecretMessages(this.id, query, offset, limit, filter)

    /**
     * Suspend function, which invites a bot to a chat (if it is not yet a member) and sends it the
     * /start command. Bots can't be invited to a private chat other than the chat with the bot. Bots
     * can't be invited to channels (although they can be added as admins) and secret chats. Returns the
     * sent message.
     *
     * @param botUserId Identifier of the bot.
     * @param parameter A hidden parameter sent to the bot for deep linking purposes
     * (https://core.telegram.org/bots#deep-linking).
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.sendBotStartMessage(botUserId: Long, parameter: String?) =
        api.sendBotStartMessage(botUserId, this.id, parameter)

    /**
     * Suspend function, which sends a notification about user activity in a chat.
     *
     * @param messageThreadId If not 0, a message thread identifier in which the action was performed.
     *
     * @param action The action description; pass null to cancel the currently active action.
     */
    suspend fun Chat.sendAction(messageThreadId: Long, action: ChatAction?) =
        api.sendChatAction(this.id, messageThreadId, action)

    /**
     * Suspend function, which sends a notification about a screenshot taken in a chat. Supported only
     * in private and secret chats.
     */
    suspend fun Chat.sendScreenshotTakenNotification() =
        api.sendChatScreenshotTakenNotification(this.id)

    /**
     * Suspend function, which sends the result of an inline query as a message. Returns the sent
     * message. Always clears a chat draft message.
     *
     * @param messageThreadId If not 0, a message thread identifier in which the message will be sent.
     *
     * @param replyToMessageId Identifier of a message to reply to or 0.
     * @param options Options to be used to send the message; pass null to use default options.
     * @param queryId Identifier of the inline query.
     * @param resultId Identifier of the inline result.
     * @param hideViaBot If true, there will be no mention of a bot, via which the message is sent.
     * Can be used only for bots GetOption(&quot;animation_search_bot_username&quot;),
     * GetOption(&quot;photo_search_bot_username&quot;) and
     * GetOption(&quot;venue_search_bot_username&quot;).
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.sendInlineQueryResultMessage(
        messageThreadId: Long,
        replyToMessageId: Long,
        options: MessageSendOptions?,
        queryId: Long,
        resultId: String?,
        hideViaBot: Boolean,
    ) = api.sendInlineQueryResultMessage(
        this.id, messageThreadId, replyToMessageId, options, queryId,
        resultId, hideViaBot
    )

    /**
     * Suspend function, which sends a message. Returns the sent message.
     *
     * @param messageThreadId If not 0, a message thread identifier in which the message will be sent.
     *
     * @param replyToMessageId Identifier of the message to reply to or 0.
     * @param options Options to be used to send the message; pass null to use default options.
     * @param replyMarkup Markup for replying to the message; pass null if none; for bots only.
     * @param inputMessageContent The content of the message to be sent.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.sendMessage(
        messageThreadId: Long,
        replyToMessageId: Long,
        options: MessageSendOptions?,
        replyMarkup: ReplyMarkup?,
        inputMessageContent: InputMessageContent?,
    ) = api.sendMessage(
        this.id, messageThreadId, replyToMessageId, options, replyMarkup,
        inputMessageContent
    )

    /**
     * Suspend function, which sends 2-10 messages grouped together into an album. Currently, only
     * audio, document, photo and video messages can be grouped into an album. Documents and audio files
     * can be only grouped in an album with messages of the same type. Returns sent messages.
     *
     * @param messageThreadId If not 0, a message thread identifier in which the messages will be
     * sent.
     * @param replyToMessageId Identifier of a message to reply to or 0.
     * @param options Options to be used to send the messages; pass null to use default options.
     * @param inputMessageContents Contents of messages to be sent. At most 10 messages can be added
     * to an album.
     *
     * @return [TdApi.Messages] Contains a list of messages.
     */
    suspend fun Chat.sendMessageAlbum(
        messageThreadId: Long,
        replyToMessageId: Long,
        options: MessageSendOptions?,
        inputMessageContents: Array<InputMessageContent>?,
    ) = api.sendMessageAlbum(
        this.id, messageThreadId, replyToMessageId, options,
        inputMessageContents
    )

    /**
     * Suspend function, which sends a filled-out payment form to the bot for final verification.
     *
     * @param messageId Message identifier.
     * @param paymentFormId Payment form identifier returned by getPaymentForm.
     * @param orderInfoId Identifier returned by validateOrderInfo, or an empty string.
     * @param shippingOptionId Identifier of a chosen shipping option, if applicable.
     * @param credentials The credentials chosen by user for payment.
     * @param tipAmount Chosen by the user amount of tip in the smallest units of the currency.
     *
     * @return [TdApi.PaymentResult] Contains the result of a payment request.
     */
    suspend fun Chat.sendPaymentForm(
        messageId: Long,
        paymentFormId: Long,
        orderInfoId: String?,
        shippingOptionId: String?,
        credentials: InputCredentials?,
        tipAmount: Long,
    ) = api.sendPaymentForm(
        this.id, messageId, paymentFormId, orderInfoId, shippingOptionId,
        credentials, tipAmount
    )

    /**
     * Suspend function, which changes application-specific data associated with a chat.
     *
     * @param clientData New value of clientData.
     */
    suspend fun Chat.setClientData(clientData: String?) = api.setChatClientData(this.id, clientData)

    /**
     * Suspend function, which changes information about a chat. Available for basic groups,
     * supergroups, and channels. Requires canChangeInfo administrator right.
     *
     * @param description New chat description; 0-255 characters.
     */
    suspend fun Chat.setDescription(description: String?) = api.setChatDescription(
        this.id,
        description
    )

    /**
     * Suspend function, which changes the discussion group of a channel chat; requires canChangeInfo
     * administrator right in the channel if it is specified.
     *
     * @param discussionChatId Identifier of a new channel's discussion group. Use 0 to remove the
     * discussion group. Use the method getSuitableDiscussionChats to find all suitable groups. Basic
     * group chats must be first upgraded to supergroup chats. If new chat members don't have access to
     * old messages in the supergroup, then toggleSupergroupIsAllHistoryAvailable must be used first to
     * change that.
     */
    suspend fun Chat.setDiscussionGroup(discussionChatId: Long) = api.setChatDiscussionGroup(
        this.id,
        discussionChatId
    )

    /**
     * Suspend function, which changes the draft message in a chat.
     *
     * @param messageThreadId If not 0, a message thread identifier in which the draft was changed.
     * @param draftMessage New draft message; pass null to remove the draft.
     */
    suspend fun Chat.setDraftMessage(messageThreadId: Long, draftMessage: DraftMessage?) =
        api.setChatDraftMessage(this.id, messageThreadId, draftMessage)

    /**
     * Suspend function, which changes the location of a chat. Available only for some location-based
     * supergroups, use supergroupFullInfo.canSetLocation to check whether the method is allowed to use.
     *
     * @param location New location for the chat; must be valid and not null.
     */
    suspend fun Chat.setLocation(location: ChatLocation?) = api.setChatLocation(this.id, location)

    /**
     * Suspend function, which changes the status of a chat member, needs appropriate privileges. This
     * function is currently not suitable for transferring chat ownership; use transferChatOwnership
     * instead. Use addChatMember or banChatMember if some additional parameters needs to be passed.
     *
     * @param memberId Member identifier. Chats can be only banned and unbanned in supergroups and
     * channels.
     * @param status The new status of the member in the chat.
     */
    suspend fun Chat.setMemberStatus(memberId: MessageSender?, status: ChatMemberStatus?) =
        api.setChatMemberStatus(this.id, memberId, status)

    /**
     * Suspend function, which selects a message sender to send messages in a chat.
     *
     * @param messageSenderId New message sender for the chat.
     */
    suspend fun Chat.setMessageSender(messageSenderId: MessageSender?) =
        api.setChatMessageSender(this.id, messageSenderId)

    /**
     * Suspend function, which changes the message TTL in a chat. Requires canDeleteMessages
     * administrator right in basic groups, supergroups and channels Message TTL can't be changed in a
     * chat with the current user (Saved Messages) and the chat 777000 (Telegram.)
     *
     * @param ttl New TTL value, in seconds; must be one of 0, 86400, 7 * 86400, or 31 * 86400 unless
     * the chat is secret.
     */
    suspend fun Chat.setMessageTtl(ttl: Int) = api.setChatMessageTtl(this.id, ttl)

    /**
     * Suspend function, which changes the notification settings of a chat. Notification settings of a
     * chat with the current user (Saved Messages) can't be changed.
     *
     * @param notificationSettings New notification settings for the chat. If the chat is muted for
     * more than 1 week, it is considered to be muted forever.
     */
    suspend fun Chat.setNotificationSettings(notificationSettings: ChatNotificationSettings?) =
        api.setChatNotificationSettings(this.id, notificationSettings)

    /**
     * Suspend function, which changes the chat members permissions. Supported only for basic groups
     * and supergroups. Requires canRestrictMembers administrator right.
     *
     * @param permissions New non-administrator members permissions in the chat.
     */
    suspend fun Chat.setPermissions(permissions: ChatPermissions?) = api.setChatPermissions(
        this.id,
        permissions
    )

    /**
     * Suspend function, which changes the photo of a chat. Supported only for basic groups,
     * supergroups and channels. Requires canChangeInfo administrator right.
     *
     * @param photo New chat photo; pass null to delete the chat photo.
     */
    suspend fun Chat.setPhoto(photo: InputChatPhoto?) = api.setChatPhoto(this.id, photo)

    /**
     * Suspend function, which changes the slow mode delay of a chat. Available only for supergroups;
     * requires canRestrictMembers rights.
     *
     * @param slowModeDelay New slow mode delay for the chat, in seconds; must be one of 0, 10, 30,
     * 60, 300, 900, 3600.
     */
    suspend fun Chat.setSlowModeDelay(slowModeDelay: Int) = api.setChatSlowModeDelay(
        this.id,
        slowModeDelay
    )

    /**
     * Suspend function, which changes the chat theme. Supported only in private and secret chats.
     *
     * @param themeName Name of the new chat theme; pass an empty string to return the default theme.
     */
    suspend fun Chat.setTheme(themeName: String?) = api.setChatTheme(this.id, themeName)

    /**
     * Suspend function, which changes the chat title. Supported only for basic groups, supergroups
     * and channels. Requires canChangeInfo administrator right.
     *
     * @param title New title of the chat; 1-128 characters.
     */
    suspend fun Chat.setTitle(title: String?) = api.setChatTitle(this.id, title)

    /**
     * Suspend function, which updates the game score of the specified user in the game; for bots
     * only.
     *
     * @param messageId Identifier of the message.
     * @param editMessage True, if the message needs to be edited.
     * @param userId User identifier.
     * @param score The new score.
     * @param force Pass true to update the score even if it decreases. If the score is 0, the user
     * will be deleted from the high score table.
     *
     * @return [TdApi.Message] Describes a message.
     */
    suspend fun Chat.setGameScore(
        messageId: Long,
        editMessage: Boolean,
        userId: Long,
        score: Int,
        force: Boolean,
    ) = api.setGameScore(this.id, messageId, editMessage, userId, score, force)

    /**
     * Suspend function, which changes the user answer to a poll. A poll in quiz mode can be answered
     * only once.
     *
     * @param messageId Identifier of the message containing the poll.
     * @param optionIds 0-based identifiers of answer options, chosen by the user. User can choose
     * more than 1 answer option only is the poll allows multiple answers.
     */
    suspend fun Chat.setPollAnswer(messageId: Long, optionIds: IntArray?) = api.setPollAnswer(
        this.id,
        messageId, optionIds
    )

    /**
     * Suspend function, which changes default participant identifier, on whose behalf a video chat in
     * the chat will be joined.
     *
     * @param defaultParticipantId Default group call participant identifier to join the video chats.
     */
    suspend fun Chat.setVideoDefaultParticipant(defaultParticipantId: MessageSender?) =
        api.setVideoChatDefaultParticipant(this.id, defaultParticipantId)

    /**
     * Suspend function, which stops a poll. A poll in a message can be stopped when the message has
     * canBeEdited flag set.
     *
     * @param messageId Identifier of the message containing the poll.
     * @param replyMarkup The new message reply markup; pass null if none; for bots only.
     */
    suspend fun Chat.stopPoll(messageId: Long, replyMarkup: ReplyMarkup?) = api.stopPoll(
        this.id,
        messageId, replyMarkup
    )

    /**
     * Suspend function, which changes the value of the default disableNotification parameter, used
     * when a message is sent to a chat.
     *
     * @param defaultDisableNotification New value of defaultDisableNotification.
     */
    suspend fun Chat.toggleDefaultDisableNotification(defaultDisableNotification: Boolean) =
        api.toggleChatDefaultDisableNotification(this.id, defaultDisableNotification)

    /**
     * Suspend function, which changes the ability of users to save, forward, or copy chat content.
     * Supported only for basic groups, supergroups and channels. Requires owner privileges.
     *
     * @param hasProtectedContent True, if chat content can't be saved locally, forwarded, or copied.
     */
    suspend fun Chat.toggleHasProtectedContent(hasProtectedContent: Boolean) =
        api.toggleChatHasProtectedContent(this.id, hasProtectedContent)

    /**
     * Suspend function, which changes the marked as unread state of a chat.
     *
     * @param isMarkedAsUnread New value of isMarkedAsUnread.
     */
    suspend fun Chat.toggleIsMarkedAsUnread(isMarkedAsUnread: Boolean) =
        api.toggleChatIsMarkedAsUnread(this.id, isMarkedAsUnread)

    /**
     * Suspend function, which changes the pinned state of a chat. There can be up to
     * GetOption(&quot;pinned_chat_count_max&quot;)/GetOption(&quot;pinned_archived_chat_count_max&quot;)
     * pinned non-secret chats and the same number of secret chats in the main/arhive chat list.
     *
     * @param chatList Chat list in which to change the pinned state of the chat.
     * @param isPinned True, if the chat is pinned.
     */
    suspend fun Chat.toggleIsPinned(chatList: ChatList?, isPinned: Boolean) =
        api.toggleChatIsPinned(chatList, this.id, isPinned)

    /**
     * Suspend function, which changes the owner of a chat. The current user must be a current owner
     * of the chat. Use the method canTransferOwnership to check whether the ownership can be transferred
     * from the current session. Available only for supergroups and channel chats.
     *
     * @param userId Identifier of the user to which transfer the ownership. The ownership can't be
     * transferred to a bot or to a deleted user.
     * @param password The password of the current user.
     */
    suspend fun Chat.transferOwnership(userId: Long, password: String?) =
        api.transferChatOwnership(this.id, userId, password)

    /**
     * Suspend function, which removes all pinned messages from a chat; requires canPinMessages rights
     * in the group or canEditMessages rights in the channel.
     */
    suspend fun Chat.unpinAllMessages() = api.unpinAllChatMessages(this.id)

    /**
     * Suspend function, which removes a pinned message from a chat; requires canPinMessages rights in
     * the group or canEditMessages rights in the channel.
     *
     * @param messageId Identifier of the removed pinned message.
     */
    suspend fun Chat.unpinMessage(messageId: Long) = api.unpinChatMessage(this.id, messageId)

    /**
     * Suspend function, which creates a new supergroup from an existing basic group and sends a
     * corresponding messageChatUpgradeTo and messageChatUpgradeFrom; requires creator privileges.
     * Deactivates the original basic group.
     *
     *
     * @return [TdApi.Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
     */
    suspend fun Chat.upgradeBasicGroupToSupergroup() =
        api.upgradeBasicGroupChatToSupergroupChat(this.id)

    /**
     * Suspend function, which validates the order information provided by a user and returns the
     * available shipping options for a flexible invoice.
     *
     * @param messageId Message identifier.
     * @param orderInfo The order information, provided by the user; pass null if empty.
     * @param allowSave True, if the order information can be saved.
     *
     * @return [TdApi.ValidatedOrderInfo] Contains a temporary identifier of validated order
     * information, which is stored for one hour. Also contains the available shipping options.
     */
    suspend fun Chat.validateOrderInfo(
        messageId: Long,
        orderInfo: OrderInfo?,
        allowSave: Boolean,
    ) = api.validateOrderInfo(this.id, messageId, orderInfo, allowSave)

    /**
     * Suspend function, which informs TDLib that messages are being viewed by the user. Sponsored
     * messages must be marked as viewed only when the entire text of the message is shown on the screen
     * (excluding the button). Many useful activities depend on whether the messages are currently being
     * viewed or not (e.g., marking messages as read, incrementing a view counter, updating a view
     * counter, removing deleted messages in supergroups and channels).
     *
     * @param messageThreadId If not 0, a message thread identifier in which the messages are being
     * viewed.
     * @param messageIds The identifiers of the messages being viewed.
     * @param forceRead True, if messages in closed chats must be marked as read by the request.
     */
    suspend fun Chat.viewMessages(
        messageThreadId: Long,
        messageIds: LongArray?,
        forceRead: Boolean,
    ) = api.viewMessages(this.id, messageThreadId, messageIds, forceRead)
}
